{
    "docs": [
        {
            "location": "/", 
            "text": "Connecting a New Device\n\n\nFollow the instructions below to connect your device to the \nCloud4RPI\n control panel.\n\n\nPrerequisites\n\n\nIt is advisable to update your system before installing.\n\n\n$ sudo apt-get update \n sudo apt-get upgrade\n\n\n\n\nInstall/update the required packages.\n\n\n$ sudo apt-get install git python python-pip\n\n\n\n\nYou can use alternative methods to \ninstall pip\n.\n\n\n\n\nNote\n\n\nThe Cloud4rpi library is compatible with Python 2.7.9+ and Python 3.2+ versions.\n\n\n\n\n[Optional] Enable interfaces\n\n\nIf your OS is \nRaspbian\n, follow the steps below:\n\n\n\n\nRun \nsudo raspi-config\n\n\nOpen a section for configuring additional interfaces. The required section is named \nAdvanced Options\n or \nInterfacing Options | Configure connections to peripherals\n depending on the version.\n\n\nEnable I2C, 1-wire and other necessary interfaces.\n\n\nChoose \nFinish\n.\n\n\nReboot the device with the \nsudo reboot\n command.\n\n\n\n\nGetting the Cloud4RPI Client Library\n\n\nInstall the library using your preferred Python version. The following command installs and integrates Cloud4RPI with your OS's default Python interpreter (usually Python 2):\n\n\n$ sudo pip install cloud4rpi\n\n\n\n\nIf you are using Python 3, use the following command:\n\n\nsudo python3 -m pip install cloud4rpi\n\n\n\n\n\n\nNote\n\n\nFor information on how to work with several versions of Python installed, see \nPython Documentation\n.\n\n\n\n\nHacking Together some Code\n\n\nWe have prepared several samples in the \nexamples\n directory to demonstrate sending data to the Cloud.\n\n\nClone the Cloud4RPI repository to get the \nexamples\n directory on your device.\n\n\ngit clone https://github.com/cloud4rpi/cloud4rpi.git\n\n\n\n\nBefore running a sample, remember to insert your device token to the line like this:\n\n\nDEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'\n\n\n\n\nUse any text editor (for instance, \nnano\n) to replace \n__YOUR_DEVICE_TOKEN__\n with the token displayed at the top of the device page. If it does not display anything on the \nDevices\n page, you can create a device using the \nNew Device\n button in the top right corner, and use its token.\n\n\nRunning\n\n\nExecute the script with the Python interpreter, for example:\n\n\n$ sudo python minimal.py\n\n\n\n\n\n\nNote\n\n\nIf you have installed Cloud4RPI to a non-default Python, use the version with the Cloud4RPI library.\n\n\n\n\nIf the script output looks right, open the \nDevices\n page to see if the device status has changed.\n\n\nInstalling as a service\n\n\nYou can use our service templates to facilitate service installation. Pass the path to your Cloud4RPI-enabled Python script to the \nservice_install.sh\n script as a parameter. \n\n\nwget https://raw.githubusercontent.com/cloud4rpi/cloud4rpi/master/service_install.sh\nchmod +x service_install.sh\nsudo ./service_install.sh your_script.py\n\n\n\n\nIf you have a stable internet connection, you can use the piped script technique to do this in a single line. However, use this technique at your own risk, because a script download failure may cause unpredictable behavior.\n\n\nwget -O - https://raw.githubusercontent.com/cloud4rpi/cloud4rpi/master/service_install.sh | sudo bash -s your_script.py\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'your_script.py' with the actual path to your service script.", 
            "title": "Home"
        }, 
        {
            "location": "/#connecting-a-new-device", 
            "text": "Follow the instructions below to connect your device to the  Cloud4RPI  control panel.", 
            "title": "Connecting a New Device"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "It is advisable to update your system before installing.  $ sudo apt-get update   sudo apt-get upgrade  Install/update the required packages.  $ sudo apt-get install git python python-pip  You can use alternative methods to  install pip .   Note  The Cloud4rpi library is compatible with Python 2.7.9+ and Python 3.2+ versions.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#optional-enable-interfaces", 
            "text": "If your OS is  Raspbian , follow the steps below:   Run  sudo raspi-config  Open a section for configuring additional interfaces. The required section is named  Advanced Options  or  Interfacing Options | Configure connections to peripherals  depending on the version.  Enable I2C, 1-wire and other necessary interfaces.  Choose  Finish .  Reboot the device with the  sudo reboot  command.", 
            "title": "[Optional] Enable interfaces"
        }, 
        {
            "location": "/#getting-the-cloud4rpi-client-library", 
            "text": "Install the library using your preferred Python version. The following command installs and integrates Cloud4RPI with your OS's default Python interpreter (usually Python 2):  $ sudo pip install cloud4rpi  If you are using Python 3, use the following command:  sudo python3 -m pip install cloud4rpi   Note  For information on how to work with several versions of Python installed, see  Python Documentation .", 
            "title": "Getting the Cloud4RPI Client Library"
        }, 
        {
            "location": "/#hacking-together-some-code", 
            "text": "We have prepared several samples in the  examples  directory to demonstrate sending data to the Cloud.  Clone the Cloud4RPI repository to get the  examples  directory on your device.  git clone https://github.com/cloud4rpi/cloud4rpi.git  Before running a sample, remember to insert your device token to the line like this:  DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'  Use any text editor (for instance,  nano ) to replace  __YOUR_DEVICE_TOKEN__  with the token displayed at the top of the device page. If it does not display anything on the  Devices  page, you can create a device using the  New Device  button in the top right corner, and use its token.", 
            "title": "Hacking Together some Code"
        }, 
        {
            "location": "/#running", 
            "text": "Execute the script with the Python interpreter, for example:  $ sudo python minimal.py   Note  If you have installed Cloud4RPI to a non-default Python, use the version with the Cloud4RPI library.   If the script output looks right, open the  Devices  page to see if the device status has changed.", 
            "title": "Running"
        }, 
        {
            "location": "/#installing-as-a-service", 
            "text": "You can use our service templates to facilitate service installation. Pass the path to your Cloud4RPI-enabled Python script to the  service_install.sh  script as a parameter.   wget https://raw.githubusercontent.com/cloud4rpi/cloud4rpi/master/service_install.sh\nchmod +x service_install.sh\nsudo ./service_install.sh your_script.py  If you have a stable internet connection, you can use the piped script technique to do this in a single line. However, use this technique at your own risk, because a script download failure may cause unpredictable behavior.  wget -O - https://raw.githubusercontent.com/cloud4rpi/cloud4rpi/master/service_install.sh | sudo bash -s your_script.py   Note  You need to replace 'your_script.py' with the actual path to your service script.", 
            "title": "Installing as a service"
        }, 
        {
            "location": "/typical-scenarios/", 
            "text": "Typical Scenarios\n\n\n\n\nNote\n\n\nDon't forget to replace \n__YOUR_DEVICE_TOKEN__\n in the samples with the personal device token.\n\n\n\n\nDS18B20 Temperature Sensor\n\n\nPrerequisites\n\n\nYou need:\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device.\n\n\nEnabled\n 1-wire interface.\n\n\nBreadboard, connecting wires, 4.7K\u03a9 resistor.\n\n\n\n\nCode\n\n\n'RoomTemp': {\n    'type': 'numeric',\n    'bind': ds_sensors[0]\n},\n# 'OutsideTemp': {\n#     'type': 'numeric',\n#     'bind': ds_sensors[1]\n# },\n'CPUTemp': {\n    'type': 'numeric',\n    'bind': rpi.cpu_temp\n}\n\n\n\n\nOpen the \nsensors.py\n sample file from the \nexamples\n folder\n\n\n\n\nMake necessary changes in \nsensors.py\n if you have another sensor configuration.\n\n\nRun \nsensors\n or restart the \ncloud4rpi\n service. New variables\nnamed \nRoomTemp\n and \nCPUTemp\n should appear on such device\npage.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nChart\n widget and choose the newly added \nRoomTemp\n variable.\n\n\nAdd a new \nGauge\n widget and choose the newly added \nCPUTemp\n variable.\n\n\nNow you can monitor CPU and room temperature using these widgets.\n\n\n\n\nControl LED from WEB\n\n\nPrerequisites\n\n\nYou need\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device\n\n\nBreadboard, connecting wires, 270-330 \u03a9 resistor\n\n\n\n\n\n\nNote\n\n\nCloud4rpi uses physical pins numbering (\nlearn more\n).\n\n\n\n\nCode\n\n\n'LEDOn': {\n    'type': 'bool',\n    'value': False,\n    'bind': led_control\n},\n\n\n\n\nOpen the \nactuator.py\n sample file from the \nexamples\n folder\n\n\n\n\nUncomment code in \nactuator.py\n. If you connected an LED to a differed GPIO pin, set the correct value to the \nLED_PIN\n variable.\n\n\nRun \nactuator.py\n or restart the \ncloud4rpi\n service. A new variable named \nLEDOn\n should appear on the device page.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nSwitch\n widget and choose the newly added \nLEDOn\n variable.\n\n\nNow you can switch LED state using this widget.\n\n\n\n\nMonitor Device Events using colored status\n\n\nPrerequisites\n\n\nYou need\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device\n\n\n\n\nCode\n\n\n'STATUS': {\n    'type': 'string',\n    'bind': listen_for_events\n}\n\n\n\n\nOpen the \nstatus.py\n sample file from the \nexamples\n folder\n\n\nCode\n\n\ndef listen_for_events():\n    # write your own logic here\n    result = random.randint(1, 5)\n    if result == 1:\n        return 'RING'\n\n    if result == 5:\n        return 'BOOM!'\n\n    return 'IDLE'\n\n\n\n\n\n\nNote\n\n\nFeel free to re-write event generation logic based on your specific conditions:\n\n\n\n\n\n\nRun \nstatus.py\n or restart the \ncloud4rpi\n service. A new variable named \nSTATUS\n should appear on the device page.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nText\n widget and choose the newly added \nSTATUS\n variable.\n\n\nChange the pre-defined status color items according to the event names from the code above.\n\n\nAs a result, you should have three items like the following:\n\n{ IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}\n\n\nNow this widget displays incoming status with color.", 
            "title": "Typical Scenarios"
        }, 
        {
            "location": "/typical-scenarios/#typical-scenarios", 
            "text": "Note  Don't forget to replace  __YOUR_DEVICE_TOKEN__  in the samples with the personal device token.", 
            "title": "Typical Scenarios"
        }, 
        {
            "location": "/typical-scenarios/#ds18b20-temperature-sensor", 
            "text": "", 
            "title": "DS18B20 Temperature Sensor"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites", 
            "text": "You need:   \u0421onfigured and  connected  Raspberry Pi device.  Enabled  1-wire interface.  Breadboard, connecting wires, 4.7K\u03a9 resistor.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code", 
            "text": "'RoomTemp': {\n    'type': 'numeric',\n    'bind': ds_sensors[0]\n},\n# 'OutsideTemp': {\n#     'type': 'numeric',\n#     'bind': ds_sensors[1]\n# },\n'CPUTemp': {\n    'type': 'numeric',\n    'bind': rpi.cpu_temp\n}  Open the  sensors.py  sample file from the  examples  folder   Make necessary changes in  sensors.py  if you have another sensor configuration.  Run  sensors  or restart the  cloud4rpi  service. New variables\nnamed  RoomTemp  and  CPUTemp  should appear on such device\npage.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Chart  widget and choose the newly added  RoomTemp  variable.  Add a new  Gauge  widget and choose the newly added  CPUTemp  variable.  Now you can monitor CPU and room temperature using these widgets.", 
            "title": "Code"
        }, 
        {
            "location": "/typical-scenarios/#control-led-from-web", 
            "text": "", 
            "title": "Control LED from WEB"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites_1", 
            "text": "You need   \u0421onfigured and  connected  Raspberry Pi device  Breadboard, connecting wires, 270-330 \u03a9 resistor    Note  Cloud4rpi uses physical pins numbering ( learn more ).", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code_1", 
            "text": "'LEDOn': {\n    'type': 'bool',\n    'value': False,\n    'bind': led_control\n},  Open the  actuator.py  sample file from the  examples  folder   Uncomment code in  actuator.py . If you connected an LED to a differed GPIO pin, set the correct value to the  LED_PIN  variable.  Run  actuator.py  or restart the  cloud4rpi  service. A new variable named  LEDOn  should appear on the device page.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Switch  widget and choose the newly added  LEDOn  variable.  Now you can switch LED state using this widget.", 
            "title": "Code"
        }, 
        {
            "location": "/typical-scenarios/#monitor-device-events-using-colored-status", 
            "text": "", 
            "title": "Monitor Device Events using colored status"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites_2", 
            "text": "You need   \u0421onfigured and  connected  Raspberry Pi device", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code_2", 
            "text": "'STATUS': {\n    'type': 'string',\n    'bind': listen_for_events\n}  Open the  status.py  sample file from the  examples  folder", 
            "title": "Code"
        }, 
        {
            "location": "/typical-scenarios/#code_3", 
            "text": "def listen_for_events():\n    # write your own logic here\n    result = random.randint(1, 5)\n    if result == 1:\n        return 'RING'\n\n    if result == 5:\n        return 'BOOM!'\n\n    return 'IDLE'   Note  Feel free to re-write event generation logic based on your specific conditions:    Run  status.py  or restart the  cloud4rpi  service. A new variable named  STATUS  should appear on the device page.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Text  widget and choose the newly added  STATUS  variable.  Change the pre-defined status color items according to the event names from the code above.  As a result, you should have three items like the following: { IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}  Now this widget displays incoming status with color.", 
            "title": "Code"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nFrequently Asked Questions when working with Cloud4Rpi\n\n\nInsecure Platform Warning\n\n\nError \n\"InsecurePlatformWarning: A true SSLContext object is not available...\"\n\n\nYou need Python version 2.7.9 or higher installed. Please check it with\n\n\n$ python --version\n\n\n\n\nand update if necessary.\n\n\n$ wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\n$ gunzip Python-2.7.9.tgz\n$ tar -xvf Python-2.7.9.tar\n$ cd Python-2.7.9/\n$ ./configure\n$ make\n$ sudo make install\n\n\n\n\nWhere can I find .log file for service?\n\n\nIf you use \n.../examples/control.py\n as a service, the default path for the log-file is \n'/var/log/cloud4rpi.log'\n\n\nHowever, you can specify a different log file location via the LOG_FILE_PATH variable:\n\n\nLOG_FILE_PATH = '/var/log/cloud4rpi.log'\n\n\nThe following code is required to activate logging to a file:\n\n\ncloud4rpi.set_logging_to_file(LOG_FILE_PATH)", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "Frequently Asked Questions when working with Cloud4Rpi", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#insecure-platform-warning", 
            "text": "Error  \"InsecurePlatformWarning: A true SSLContext object is not available...\"  You need Python version 2.7.9 or higher installed. Please check it with  $ python --version  and update if necessary.  $ wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\n$ gunzip Python-2.7.9.tgz\n$ tar -xvf Python-2.7.9.tar\n$ cd Python-2.7.9/\n$ ./configure\n$ make\n$ sudo make install", 
            "title": "Insecure Platform Warning"
        }, 
        {
            "location": "/faq/#where-can-i-find-log-file-for-service", 
            "text": "If you use  .../examples/control.py  as a service, the default path for the log-file is  '/var/log/cloud4rpi.log'  However, you can specify a different log file location via the LOG_FILE_PATH variable:  LOG_FILE_PATH = '/var/log/cloud4rpi.log'  The following code is required to activate logging to a file:  cloud4rpi.set_logging_to_file(LOG_FILE_PATH)", 
            "title": "Where can I find .log file for service?"
        }, 
        {
            "location": "/api/", 
            "text": "API\n\n\nHTTP\n\n\nUpdate device's config\n\n\nUpdates device's config.\n\n\nPOST /api/devices/{token}/config/update\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example creates two variables on the device. Temperature of the numeric type and LEDOn of the bool type.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '[{\nname\n:\nTemperature\n,\ntype\n:\nnumeric\n},{\nname\n:\nLEDOn\n,\ntype\n:\nbool\n}]' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config/update\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'device_token' with your device token displayed on the device page.\n\n\n\n\nSend data\n\n\nSends device data.\n\n\nPOST /api/devices/{token}/stream/data\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example sends the Temperature and LEDOn values to cloud4rpi.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n2016-11-14T09:59:28.214Z\n,\npayload\n:{\nTemperature\n:24,\nLEDOn\n:false}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/data\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'device_token' with your device token displayed on the device page.\n\n\n\n\nSend diagnostic data\n\n\nSends diagnostic data.\n\n\nPOST /api/devices/{token}/stream/system\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example sends the CPU Temperature and IP Address diagnostic values to cloud4rpi.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n2016-11-14T09:59:28.214Z\n,\npayload\n:{\nCPU Temperature\n:51,\nIP Address\n:\n8.8.8.8\n}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/system\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'device_token' with your device token displayed on the device page.\n\n\n\n\nMQTT\n\n\nTo be supplied", 
            "title": "API"
        }, 
        {
            "location": "/api/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/api/#http", 
            "text": "", 
            "title": "HTTP"
        }, 
        {
            "location": "/api/#update-devices-config", 
            "text": "Updates device's config.  POST /api/devices/{token}/config/update\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Update device's config"
        }, 
        {
            "location": "/api/#path-parameters", 
            "text": "Parameter  Description      token  The token of the device     The following example creates two variables on the device. Temperature of the numeric type and LEDOn of the bool type.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '[{ name : Temperature , type : numeric },{ name : LEDOn , type : bool }]' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config/update   Note  You need to replace 'device_token' with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#send-data", 
            "text": "Sends device data.  POST /api/devices/{token}/stream/data\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Send data"
        }, 
        {
            "location": "/api/#path-parameters_1", 
            "text": "Parameter  Description      token  The token of the device     The following example sends the Temperature and LEDOn values to cloud4rpi.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : 2016-11-14T09:59:28.214Z , payload :{ Temperature :24, LEDOn :false}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/data   Note  You need to replace 'device_token' with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#send-diagnostic-data", 
            "text": "Sends diagnostic data.  POST /api/devices/{token}/stream/system\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Send diagnostic data"
        }, 
        {
            "location": "/api/#path-parameters_2", 
            "text": "Parameter  Description      token  The token of the device     The following example sends the CPU Temperature and IP Address diagnostic values to cloud4rpi.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : 2016-11-14T09:59:28.214Z , payload :{ CPU Temperature :51, IP Address : 8.8.8.8 }}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/system   Note  You need to replace 'device_token' with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#mqtt", 
            "text": "To be supplied", 
            "title": "MQTT"
        }
    ]
}