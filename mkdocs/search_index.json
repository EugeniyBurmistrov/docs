{
    "docs": [
        {
            "location": "/", 
            "text": "Connecting a New Device\n\n\nFollow the instructions below to connect your device to the \nCloud4RPI\n cloud control panel.\n\n\nPrerequisites\n\n\nIt is always a good idea to upgrade your system before installing. Note that it may take some time.\n\n\n$ sudo apt-get update \n sudo apt-get upgrade\n\n\n\n\nInstall the required packages.\n\n\n$ sudo apt-get install git python python-pip\n\n\n\n\nYou can use alternative methods to \ninstall pip\n.\n\n\n\n\nNote\n\n\nThe Cloud4rpi library works correctly with the Python 2.7.9+ and Python 3.2+ versions.\n\n\n\n\nCheck installation\n\n\nMake sure that you have git and pip installed. \n\n\n$ pip --version\npip 1.5.6 from /usr/lib/python2.7/dist-packages (python 2.7)\n$ git --version\ngit version 2.1.4\n\n\n\n\nOptional: enable the I2C, 1-wire, etc. interfaces\n\n\n\n\nrun \nsudo raspi-config\n\n\nopen a section where you can configure additional interfaces. The required section is named \nAdvanced Options\n or \nInterfacing Options | Configure connections to peripherals\n depending on the version.\n\n\nenable necessary interfaces\n\n\nchoose \nfinish\n and reboot device\n\n\n\n\nSetup Client\n\n\nGet the cloud4rpi client library\n\n\n$ sudo pip install cloud4rpi\n\n\n\n\nInstall the lib using the available Python version. For example, the following command installs cloud4rpi using Python 3. For information on how to work with other versions of Python installed, see https://docs.python.org/3/installing/. \n\n\nsudo python3 -m pip install cloud4rpi\n\n\n\n\nTime to hack together some code\n\n\nYou can find several samples in the \nexamples\n directory.\nDon't forget to insert your device token where you are prompted, e.g. in \ncontrol.py\n there is a line\n\n\n DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'\n\n\n\n\nUsing your editor of choice, replace \n__YOUR_DEVICE_TOKEN__\n\nwith the token displayed at the top of the device page.\n\n\nRun\n\n\n$ sudo python io_sensors.py\n\n\n\n\nInstall as a service\n\n\nYou can use our service templates to facilitate service installation.\n\n\n\n\nDownload the content of the \nservices\n directory and save it somewhere on your device where you can access it.\n\n\nCheck the init manager of your OS\n\n\n\n\n$ ps -p 1\n\n\n\n\n\n\nIf you see output like \n1 ?   00:00:36 systemd\n your OS is running systemd, use the \ninstall.sh\n script together with \nservice.tmpl\n\n\n\n\n$ sudo bash install.sh path/to/your/script\n$ sudo systemctl start cloud4rpi.service\n# You can also enable the service to be started on bootup\n$ sudo systemctl enable cloud4rpi.service\n\n\n\n\n\n\nIf you see output like \n1 ?   00:00:36 init\n your OS is running SysV-style init, use the \ninstall_sysv.sh\n script together with \nservice_sysv.tmpl\n\n\n\n\n$ sudo bash install_sysv.sh path/to/your/script\n$ sudo service cloud4rpi start\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'path/to/your/script' with the actual service script location.", 
            "title": "Home"
        }, 
        {
            "location": "/#connecting-a-new-device", 
            "text": "Follow the instructions below to connect your device to the  Cloud4RPI  cloud control panel.", 
            "title": "Connecting a New Device"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "It is always a good idea to upgrade your system before installing. Note that it may take some time.  $ sudo apt-get update   sudo apt-get upgrade  Install the required packages.  $ sudo apt-get install git python python-pip  You can use alternative methods to  install pip .   Note  The Cloud4rpi library works correctly with the Python 2.7.9+ and Python 3.2+ versions.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#check-installation", 
            "text": "Make sure that you have git and pip installed.   $ pip --version\npip 1.5.6 from /usr/lib/python2.7/dist-packages (python 2.7)\n$ git --version\ngit version 2.1.4", 
            "title": "Check installation"
        }, 
        {
            "location": "/#optional-enable-the-i2c-1-wire-etc-interfaces", 
            "text": "run  sudo raspi-config  open a section where you can configure additional interfaces. The required section is named  Advanced Options  or  Interfacing Options | Configure connections to peripherals  depending on the version.  enable necessary interfaces  choose  finish  and reboot device", 
            "title": "Optional: enable the I2C, 1-wire, etc. interfaces"
        }, 
        {
            "location": "/#setup-client", 
            "text": "", 
            "title": "Setup Client"
        }, 
        {
            "location": "/#get-the-cloud4rpi-client-library", 
            "text": "$ sudo pip install cloud4rpi  Install the lib using the available Python version. For example, the following command installs cloud4rpi using Python 3. For information on how to work with other versions of Python installed, see https://docs.python.org/3/installing/.   sudo python3 -m pip install cloud4rpi", 
            "title": "Get the cloud4rpi client library"
        }, 
        {
            "location": "/#time-to-hack-together-some-code", 
            "text": "You can find several samples in the  examples  directory.\nDon't forget to insert your device token where you are prompted, e.g. in  control.py  there is a line   DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'  Using your editor of choice, replace  __YOUR_DEVICE_TOKEN__ \nwith the token displayed at the top of the device page.", 
            "title": "Time to hack together some code"
        }, 
        {
            "location": "/#run", 
            "text": "$ sudo python io_sensors.py", 
            "title": "Run"
        }, 
        {
            "location": "/#install-as-a-service", 
            "text": "You can use our service templates to facilitate service installation.   Download the content of the  services  directory and save it somewhere on your device where you can access it.  Check the init manager of your OS   $ ps -p 1   If you see output like  1 ?   00:00:36 systemd  your OS is running systemd, use the  install.sh  script together with  service.tmpl   $ sudo bash install.sh path/to/your/script\n$ sudo systemctl start cloud4rpi.service\n# You can also enable the service to be started on bootup\n$ sudo systemctl enable cloud4rpi.service   If you see output like  1 ?   00:00:36 init  your OS is running SysV-style init, use the  install_sysv.sh  script together with  service_sysv.tmpl   $ sudo bash install_sysv.sh path/to/your/script\n$ sudo service cloud4rpi start   Note  You need to replace 'path/to/your/script' with the actual service script location.", 
            "title": "Install as a service"
        }, 
        {
            "location": "/typical-scenarios/", 
            "text": "Typical Scenarios\n\n\n\n\nNote\n\n\nDon't forget to replace '\nYOUR_DEVICE_TOKEN\n' in the samples with the personal device token.\n\n\n\n\nDS18B20 Temperature Sensor\n\n\nPrerequisites\n\n\nYou need\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device\n\n\n1-wire interface should be \nenabled\n\n\nBreadboard, connecting wires, 4.7K \u03a9 resistor\n\n\n\n\nCode\n\n\n'RoomTemp': {\n    'type': 'numeric',\n    'bind': ds_sensors[0]\n},\n# 'OutsideTemp': {\n#     'type': 'numeric',\n#     'bind': ds_sensors[1]\n# },\n'CPUTemp': {\n    'type': 'numeric',\n    'bind': rpi.cpu_temp\n}\n\n\n\n\nOpen the \nsensors.py\n sample file from the \nexamples\n folder\n\n\n\n\nMake necessary changes in \nsensors.py\n if you have another sensor configuration. \n\n\nRun \nsensors\n or restart the \ncloud4rpi\n service. New variables \nnamed \nRoomTemp\n and \nCPUTemp\n should appear on such device\npage.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nChart\n widget and choose the newly added \nRoomTemp\n variable.\n\n\nAdd a new \nGauge\n widget and choose the newly added \nCPUTemp\n variable.\n\n\nNow you can monitor CPU and room temperature using these widgets.\n\n\n\n\nControl LED from WEB\n\n\nPrerequisites\n\n\nYou need\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device\n\n\nBreadboard, connecting wires, 270-330 \u03a9 resistor\n\n\n\n\n\n\nNote\n\n\nCloud4rpi uses physical pins numbering (\nlearn more\n).\n\n\n\n\nCode\n\n\n'LEDOn': {\n    'type': 'bool',\n    'value': False,\n    'bind': led_control\n},\n\n\n\n\nOpen the \nactuator.py\n sample file from the \nexamples\n folder\n\n\n\n\nUncomment code in \nactuator.py\n. If you connected an LED to a differed GPIO pin, set the correct value to the \nLED_PIN\n variable.\n\n\nRun \nactuator.py\n or restart the \ncloud4rpi\n service. A new variable named \nLEDOn\n should appear on the device page.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nSwitch\n widget and choose the newly added \nLEDOn\n variable.\n\n\nNow you can switch LED state using this widget.\n\n\n\n\nMonitor Device Events using colored status\n\n\nPrerequisites\n\n\nYou need\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device\n\n\n\n\nCode\n\n\n'STATUS': {\n    'type': 'string',\n    'bind': listen_for_events\n}\n\n\n\n\nOpen the \nstatus.py\n sample file from the \nexamples\n folder\n\n\nCode\n\n\ndef listen_for_events():\n    # write your own logic here\n    result = random.randint(1, 5)\n    if result == 1:\n        return 'RING'\n\n    if result == 5:\n        return 'BOOM!'\n\n    return 'IDLE'\n\n\n\n\n\n\nNote\n\n\nFeel free to re-write event generation logic based on your specific conditions:\n\n\n\n\n\n\nRun \nstatus.py\n or restart the \ncloud4rpi\n service. A new variable named \nSTATUS\n should appear on the device page.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nText\n widget and choose the newly added \nSTATUS\n variable.\n\n\nChange the pre-defined status color items according to the event names from the code above.\n\n\nAs a result, you should have three items like the following:\n\n{ IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}\n\n\nNow this widget displays incoming status with color.", 
            "title": "Typical Scenarios"
        }, 
        {
            "location": "/typical-scenarios/#typical-scenarios", 
            "text": "Note  Don't forget to replace ' YOUR_DEVICE_TOKEN ' in the samples with the personal device token.", 
            "title": "Typical Scenarios"
        }, 
        {
            "location": "/typical-scenarios/#ds18b20-temperature-sensor", 
            "text": "", 
            "title": "DS18B20 Temperature Sensor"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites", 
            "text": "You need   \u0421onfigured and  connected  Raspberry Pi device  1-wire interface should be  enabled  Breadboard, connecting wires, 4.7K \u03a9 resistor", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code", 
            "text": "'RoomTemp': {\n    'type': 'numeric',\n    'bind': ds_sensors[0]\n},\n# 'OutsideTemp': {\n#     'type': 'numeric',\n#     'bind': ds_sensors[1]\n# },\n'CPUTemp': {\n    'type': 'numeric',\n    'bind': rpi.cpu_temp\n}  Open the  sensors.py  sample file from the  examples  folder   Make necessary changes in  sensors.py  if you have another sensor configuration.   Run  sensors  or restart the  cloud4rpi  service. New variables \nnamed  RoomTemp  and  CPUTemp  should appear on such device\npage.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Chart  widget and choose the newly added  RoomTemp  variable.  Add a new  Gauge  widget and choose the newly added  CPUTemp  variable.  Now you can monitor CPU and room temperature using these widgets.", 
            "title": "Code"
        }, 
        {
            "location": "/typical-scenarios/#control-led-from-web", 
            "text": "", 
            "title": "Control LED from WEB"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites_1", 
            "text": "You need   \u0421onfigured and  connected  Raspberry Pi device  Breadboard, connecting wires, 270-330 \u03a9 resistor    Note  Cloud4rpi uses physical pins numbering ( learn more ).", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code_1", 
            "text": "'LEDOn': {\n    'type': 'bool',\n    'value': False,\n    'bind': led_control\n},  Open the  actuator.py  sample file from the  examples  folder   Uncomment code in  actuator.py . If you connected an LED to a differed GPIO pin, set the correct value to the  LED_PIN  variable.  Run  actuator.py  or restart the  cloud4rpi  service. A new variable named  LEDOn  should appear on the device page.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Switch  widget and choose the newly added  LEDOn  variable.  Now you can switch LED state using this widget.", 
            "title": "Code"
        }, 
        {
            "location": "/typical-scenarios/#monitor-device-events-using-colored-status", 
            "text": "", 
            "title": "Monitor Device Events using colored status"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites_2", 
            "text": "You need   \u0421onfigured and  connected  Raspberry Pi device", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code_2", 
            "text": "'STATUS': {\n    'type': 'string',\n    'bind': listen_for_events\n}  Open the  status.py  sample file from the  examples  folder", 
            "title": "Code"
        }, 
        {
            "location": "/typical-scenarios/#code_3", 
            "text": "def listen_for_events():\n    # write your own logic here\n    result = random.randint(1, 5)\n    if result == 1:\n        return 'RING'\n\n    if result == 5:\n        return 'BOOM!'\n\n    return 'IDLE'   Note  Feel free to re-write event generation logic based on your specific conditions:    Run  status.py  or restart the  cloud4rpi  service. A new variable named  STATUS  should appear on the device page.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Text  widget and choose the newly added  STATUS  variable.  Change the pre-defined status color items according to the event names from the code above.  As a result, you should have three items like the following: { IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}  Now this widget displays incoming status with color.", 
            "title": "Code"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nFrequently Asked Questions when working with Cloud4Rpi\n\n\nInsecure Platform Warning\n\n\nError \n\"InsecurePlatformWarning: A true SSLContext object is not available...\"\n\n\nYou need Python version 2.7.9 or higher installed. Please check it with\n\n\n$ python --version\n\n\n\n\nand update if necessary.\n\n\n$ wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\n$ gunzip Python-2.7.9.tgz\n$ tar -xvf Python-2.7.9.tar\n$ cd Python-2.7.9/\n$ ./configure\n$ make\n$ sudo make install\n\n\n\n\nWhere can I find .log file for service?\n\n\nIf you use \n.../examples/control.py\n as a service, the default path for the log-file is \n'/var/log/cloud4rpi.log'\n\n\nHowever, you can specify a different log file location via the LOG_FILE_PATH variable:\n\n\nLOG_FILE_PATH = '/var/log/cloud4rpi.log'\n\n\nThe following code is required to activate logging to a file:\n\n\ncloud4rpi.set_logging_to_file(LOG_FILE_PATH)", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "Frequently Asked Questions when working with Cloud4Rpi", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#insecure-platform-warning", 
            "text": "Error  \"InsecurePlatformWarning: A true SSLContext object is not available...\"  You need Python version 2.7.9 or higher installed. Please check it with  $ python --version  and update if necessary.  $ wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\n$ gunzip Python-2.7.9.tgz\n$ tar -xvf Python-2.7.9.tar\n$ cd Python-2.7.9/\n$ ./configure\n$ make\n$ sudo make install", 
            "title": "Insecure Platform Warning"
        }, 
        {
            "location": "/faq/#where-can-i-find-log-file-for-service", 
            "text": "If you use  .../examples/control.py  as a service, the default path for the log-file is  '/var/log/cloud4rpi.log'  However, you can specify a different log file location via the LOG_FILE_PATH variable:  LOG_FILE_PATH = '/var/log/cloud4rpi.log'  The following code is required to activate logging to a file:  cloud4rpi.set_logging_to_file(LOG_FILE_PATH)", 
            "title": "Where can I find .log file for service?"
        }, 
        {
            "location": "/api/", 
            "text": "API\n\n\nHTTP\n\n\nUpdate device's config\n\n\nUpdates device's config.\n\n\nPOST /api/devices/{token}/config/update\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example creates two variables on the device. Temperature of the numeric type and LEDOn of the bool type.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '[{\nname\n:\nTemperature\n,\ntype\n:\nnumeric\n},{\nname\n:\nLEDOn\n,\ntype\n:\nbool\n}]' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config/update\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'device_token' with your device token displayed on the device page.\n\n\n\n\nSend data\n\n\nSends device data.\n\n\nPOST /api/devices/{token}/stream/data\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example sends the Temperature and LEDOn values to cloud4rpi.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n2016-11-14T09:59:28.214Z\n,\npayload\n:{\nTemperature\n:24,\nLEDOn\n:false}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/data\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'device_token' with your device token displayed on the device page.\n\n\n\n\nSend diagnostic data\n\n\nSends diagnostic data.\n\n\nPOST /api/devices/{token}/stream/system\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example sends the CPU Temperature and IP Address diagnostic values to cloud4rpi.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n2016-11-14T09:59:28.214Z\n,\npayload\n:{\nCPU Temperature\n:51,\nIP Address\n:\n8.8.8.8\n}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/system\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'device_token' with your device token displayed on the device page.\n\n\n\n\nMQTT\n\n\nTo be supplied", 
            "title": "API"
        }, 
        {
            "location": "/api/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/api/#http", 
            "text": "", 
            "title": "HTTP"
        }, 
        {
            "location": "/api/#update-devices-config", 
            "text": "Updates device's config.  POST /api/devices/{token}/config/update\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Update device's config"
        }, 
        {
            "location": "/api/#path-parameters", 
            "text": "Parameter  Description      token  The token of the device     The following example creates two variables on the device. Temperature of the numeric type and LEDOn of the bool type.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '[{ name : Temperature , type : numeric },{ name : LEDOn , type : bool }]' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config/update   Note  You need to replace 'device_token' with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#send-data", 
            "text": "Sends device data.  POST /api/devices/{token}/stream/data\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Send data"
        }, 
        {
            "location": "/api/#path-parameters_1", 
            "text": "Parameter  Description      token  The token of the device     The following example sends the Temperature and LEDOn values to cloud4rpi.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : 2016-11-14T09:59:28.214Z , payload :{ Temperature :24, LEDOn :false}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/data   Note  You need to replace 'device_token' with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#send-diagnostic-data", 
            "text": "Sends diagnostic data.  POST /api/devices/{token}/stream/system\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Send diagnostic data"
        }, 
        {
            "location": "/api/#path-parameters_2", 
            "text": "Parameter  Description      token  The token of the device     The following example sends the CPU Temperature and IP Address diagnostic values to cloud4rpi.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : 2016-11-14T09:59:28.214Z , payload :{ CPU Temperature :51, IP Address : 8.8.8.8 }}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/system   Note  You need to replace 'device_token' with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#mqtt", 
            "text": "To be supplied", 
            "title": "MQTT"
        }
    ]
}