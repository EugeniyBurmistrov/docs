{
    "docs": [
        {
            "location": "/", 
            "text": "Connecting a New Device\n\n\nDo the following instructions to connect your device to Cloud4RPI.\n\n\nPrerequisites\n\n\nIt is always a good idea to upgrade your system before installing. Note that it may take some time.\n\n\n$ sudo apt-get update \n sudo apt-get upgrade\n\n\n\n\nInstall the required packages.\n\n\n$ sudo apt-get install git python python-pip\n\n\n\n\nNOTE: You can use alternative methods to \ninstall pip\n.\n\n\n\n\nNote\n\n\nCloud4rpi library works correctly with Python 2.7.9+ and Python 3.2+ versions.\n\n\n\n\nCheck installation\n\n\n$ pip --version\npip 1.5.6 from /usr/lib/python2.7/dist-packages (python 2.7)\n$ git --version\ngit version 2.1.4\n\n\n\n\nOptional: enable I2C, 1-wire etc. interfaces\n\n\n\n\nrun \nsudo raspi-config\n\n\nopen \n9 Advanced Options\n\n\nenable necessary interfaces\n\n\nchoose \nfinish\n and reboot device\n\n\n\n\nSetup Client\n\n\nGet cloud4rpi client library\n\n\n$ sudo pip install cloud4rpi\n\n\n\n\nTo install lib using python3 \n\n\nsudo python3 -m pip install cloud4rpi\n\n\n\n\nTime to hack together some code\n\n\nYou can see several examples at the \nexamples\n directory of \nhttps://github.com/cloud4rpi/cloud4rpi\n.\nDon't forget to insert your device token where prompted, e.g. in io_sensors.py there is a line\n\n\n DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'\n\n\n\n\nUsing your editor of choice, replace \n__YOUR_DEVICE_TOKEN__\n\nwith the token displayed at the top of the device page.\n\n\nRun\n\n\n$ sudo python io_sensors.py\n\n\n\n\nInstall as a service\n\n\nYou can use our service templates to facilitate service installation.\n\n\n\n\nDownload the content of the \nservices\n directory of \nhttps://github.com/cloud4rpi/cloud4rpi\n somewhere on your device where you can access it.\n\n\nCheck the init manager of your OS\n\n\n\n\n$ ps -p 1\n\n\n\n\n\n\nIf you see output like \n1 ?   00:00:36 systemd\n your OS is running systemd, use the \ninstall.sh\n script together with \nservice.tmpl\n\n\n\n\n$ sudo bash install.sh path/to/your/script\n$ sudo systemctl start cloud4rpi.service\n# You can also enable the service to be started on bootup\n$ sudo systemctl enable cloud4rpi.service\n\n\n\n\n\n\nIf you see output like \n1 ?   00:00:36 init\n your OS is running SysV-style init, use the \ninstall_sysv.sh\n script together with \nservice_sysv.tmpl\n\n\n\n\n$ sudo bash install_sysv.sh path/to/your/script\n$ sudo service cloud4rpi start\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'path/to/your/script' with the actual service script location.", 
            "title": "Home"
        }, 
        {
            "location": "/#connecting-a-new-device", 
            "text": "Do the following instructions to connect your device to Cloud4RPI.", 
            "title": "Connecting a New Device"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "It is always a good idea to upgrade your system before installing. Note that it may take some time.  $ sudo apt-get update   sudo apt-get upgrade  Install the required packages.  $ sudo apt-get install git python python-pip  NOTE: You can use alternative methods to  install pip .   Note  Cloud4rpi library works correctly with Python 2.7.9+ and Python 3.2+ versions.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#check-installation", 
            "text": "$ pip --version\npip 1.5.6 from /usr/lib/python2.7/dist-packages (python 2.7)\n$ git --version\ngit version 2.1.4", 
            "title": "Check installation"
        }, 
        {
            "location": "/#optional-enable-i2c-1-wire-etc-interfaces", 
            "text": "run  sudo raspi-config  open  9 Advanced Options  enable necessary interfaces  choose  finish  and reboot device", 
            "title": "Optional: enable I2C, 1-wire etc. interfaces"
        }, 
        {
            "location": "/#setup-client", 
            "text": "", 
            "title": "Setup Client"
        }, 
        {
            "location": "/#get-cloud4rpi-client-library", 
            "text": "$ sudo pip install cloud4rpi  To install lib using python3   sudo python3 -m pip install cloud4rpi", 
            "title": "Get cloud4rpi client library"
        }, 
        {
            "location": "/#time-to-hack-together-some-code", 
            "text": "You can see several examples at the  examples  directory of  https://github.com/cloud4rpi/cloud4rpi .\nDon't forget to insert your device token where prompted, e.g. in io_sensors.py there is a line   DEVICE_TOKEN = '__YOUR_DEVICE_TOKEN__'  Using your editor of choice, replace  __YOUR_DEVICE_TOKEN__ \nwith the token displayed at the top of the device page.", 
            "title": "Time to hack together some code"
        }, 
        {
            "location": "/#run", 
            "text": "$ sudo python io_sensors.py", 
            "title": "Run"
        }, 
        {
            "location": "/#install-as-a-service", 
            "text": "You can use our service templates to facilitate service installation.   Download the content of the  services  directory of  https://github.com/cloud4rpi/cloud4rpi  somewhere on your device where you can access it.  Check the init manager of your OS   $ ps -p 1   If you see output like  1 ?   00:00:36 systemd  your OS is running systemd, use the  install.sh  script together with  service.tmpl   $ sudo bash install.sh path/to/your/script\n$ sudo systemctl start cloud4rpi.service\n# You can also enable the service to be started on bootup\n$ sudo systemctl enable cloud4rpi.service   If you see output like  1 ?   00:00:36 init  your OS is running SysV-style init, use the  install_sysv.sh  script together with  service_sysv.tmpl   $ sudo bash install_sysv.sh path/to/your/script\n$ sudo service cloud4rpi start   Note  You need to replace 'path/to/your/script' with the actual service script location.", 
            "title": "Install as a service"
        }, 
        {
            "location": "/typical-scenarios/", 
            "text": "Typical Scenarios\n\n\nDS18B20 Temperature Sensor\n\n\nPrerequisites\n\n\nYou need\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device\n\n\n1-wire interface should be \nenabled\n\n\nBreadboard, connecting wires, 4.7K \u03a9 resistor\n\n\n\n\nCode\n\n\n'CurrentTemp_1': {\n    'type': 'numeric',\n    'bind': bind_sensor(ds_sensors, DS_SENSOR_1_INDEX)\n},\n\n'CurrentTemp_2': {\n    'type': 'numeric',\n    'bind': bind_sensor(ds_sensors, DS_SENSOR_2_INDEX)\n},\n\n\n\n\n\n\nUncomment code in \napp.py\n\nif you have only 1 or more than 2 ds18b20 sensors - make necessary changes.\n\n\nRun \napp.py\n or restart \ncloud4rpi\n service. New variables\nnamed \nCurrentTemp_1\n and \nCurrentTemp_2\n should appear on such device\npage.\n\n\n\n\nControl LED from WEB\n\n\nPrerequisites\n\n\nYou need\n\n\n\n\n\u0421onfigured and \nconnected\n Raspberry Pi device\n\n\n\n\nBreadboard, connecting wires, 270-330 \u03a9 resistor\n\n\nNote:\n\nCloud4rpi uses physical pins numbering (\nlearn more\n).\n\n\n\n\n\n\nCode\n\n\n'LEDOn': {\n    'type': 'bool',\n    'value': False,\n    'bind': led_control\n},\n\n\n\n\n\n\nUncomment code in \napp.py\n. If you connected led to another GPIO pin\nthen set correct value to variable \nLED_PIN\n.\n\n\nRun \napp.py\n or restart \ncloud4rpi\n service. New variable\nnamed \nLEDOn_1\n should appear on such device page.\n\n\nOpen \nControl Panels\n page and add new control panel or open existing one.\n\n\nAdd new widget of type \nSwitch\n and choose newly added \nLEDOn_1\n variable.\n\n\nNow you can switch LED state using this widget.", 
            "title": "Typical Scenarios"
        }, 
        {
            "location": "/typical-scenarios/#typical-scenarios", 
            "text": "", 
            "title": "Typical Scenarios"
        }, 
        {
            "location": "/typical-scenarios/#ds18b20-temperature-sensor", 
            "text": "", 
            "title": "DS18B20 Temperature Sensor"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites", 
            "text": "You need   \u0421onfigured and  connected  Raspberry Pi device  1-wire interface should be  enabled  Breadboard, connecting wires, 4.7K \u03a9 resistor", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code", 
            "text": "'CurrentTemp_1': {\n    'type': 'numeric',\n    'bind': bind_sensor(ds_sensors, DS_SENSOR_1_INDEX)\n},\n\n'CurrentTemp_2': {\n    'type': 'numeric',\n    'bind': bind_sensor(ds_sensors, DS_SENSOR_2_INDEX)\n},   Uncomment code in  app.py \nif you have only 1 or more than 2 ds18b20 sensors - make necessary changes.  Run  app.py  or restart  cloud4rpi  service. New variables\nnamed  CurrentTemp_1  and  CurrentTemp_2  should appear on such device\npage.", 
            "title": "Code"
        }, 
        {
            "location": "/typical-scenarios/#control-led-from-web", 
            "text": "", 
            "title": "Control LED from WEB"
        }, 
        {
            "location": "/typical-scenarios/#prerequisites_1", 
            "text": "You need   \u0421onfigured and  connected  Raspberry Pi device   Breadboard, connecting wires, 270-330 \u03a9 resistor  Note: \nCloud4rpi uses physical pins numbering ( learn more ).", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/typical-scenarios/#code_1", 
            "text": "'LEDOn': {\n    'type': 'bool',\n    'value': False,\n    'bind': led_control\n},   Uncomment code in  app.py . If you connected led to another GPIO pin\nthen set correct value to variable  LED_PIN .  Run  app.py  or restart  cloud4rpi  service. New variable\nnamed  LEDOn_1  should appear on such device page.  Open  Control Panels  page and add new control panel or open existing one.  Add new widget of type  Switch  and choose newly added  LEDOn_1  variable.  Now you can switch LED state using this widget.", 
            "title": "Code"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nFrequently Asked Questions when working with Cloud4Rpi\n\n\nInsecure Platform Warning\n\n\nError \n\"InsecurePlatformWarning: A true SSLContext object is not available...\"\n\n\nYou need Python version 2.7.9 or higher installed. Please check it with\n\n\n$ python --version\n\n\n\n\nand update if necessary.\n\n\n$ wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\n$ gunzip Python-2.7.9.tgz\n$ tar -xvf Python-2.7.9.tar\n$ cd Python-2.7.9/\n$ ./configure\n$ make\n$ sudo make install\n\n\n\n\nWhere can I find .log file for service?\n\n\nIf you use \n.../examples/raspberrypi/control.py\n as a service the default path for log-file is \n'/var/log/cloud4rpi.log'\n\n\nBut you can specify your log file location via LOG_FILE_PATH variable:\n\n\nLOG_FILE_PATH = '/var/log/cloud4rpi.log'\n\n\nThe following code is required to activate logging to file:\n\n\ncloud4rpi.set_logging_to_file(LOG_FILE_PATH)", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "Frequently Asked Questions when working with Cloud4Rpi", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#insecure-platform-warning", 
            "text": "Error  \"InsecurePlatformWarning: A true SSLContext object is not available...\"  You need Python version 2.7.9 or higher installed. Please check it with  $ python --version  and update if necessary.  $ wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\n$ gunzip Python-2.7.9.tgz\n$ tar -xvf Python-2.7.9.tar\n$ cd Python-2.7.9/\n$ ./configure\n$ make\n$ sudo make install", 
            "title": "Insecure Platform Warning"
        }, 
        {
            "location": "/faq/#where-can-i-find-log-file-for-service", 
            "text": "If you use  .../examples/raspberrypi/control.py  as a service the default path for log-file is  '/var/log/cloud4rpi.log'  But you can specify your log file location via LOG_FILE_PATH variable:  LOG_FILE_PATH = '/var/log/cloud4rpi.log'  The following code is required to activate logging to file:  cloud4rpi.set_logging_to_file(LOG_FILE_PATH)", 
            "title": "Where can I find .log file for service?"
        }, 
        {
            "location": "/api/", 
            "text": "API\n\n\nHTTP\n\n\nUpdate device's config\n\n\nUpdates device's config.\n\n\nPOST /api/devices/{token}/config/update\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example creates two variables on the device. Temperature of the numeric type and LEDOn of the bool type.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '[{\nname\n:\nTemperature\n,\ntype\n:\nnumeric\n},{\nname\n:\nLEDOn\n,\ntype\n:\nbool\n}]' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config/update\n\n\n\n\n\n\nNote\n\n\nYou have to replace device_token with your device token displayed on the device page.\n\n\n\n\nSend data\n\n\nSends device data.\n\n\nPOST /api/devices/{token}/stream/data\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example sends Temperature and LEDOn values to the cloud4rpi.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n2016-11-14T09:59:28.214Z\n,\npayload\n:{\nTemperature\n:24,\nLEDOn\n:false}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/data\n\n\n\n\n\n\nNote\n\n\nYou have to replace device_token with your device token displayed on the device page.\n\n\n\n\nSend diagnostic data\n\n\nSends diagnostic data.\n\n\nPOST /api/devices/{token}/stream/system\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json\n\n\n\n\nPath parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe token of the device\n\n\n\n\n\n\n\n\nThe following example sends CPU Temperature and IP Address diagnostic values to the cloud4rpi.\n\n\nexport DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n2016-11-14T09:59:28.214Z\n,\npayload\n:{\nCPU Temperature\n:51,\nIP Address\n:\n8.8.8.8\n}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/system\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'device_token' with your device token displayed on the device page.\n\n\n\n\nMQTT\n\n\nTo be supplied", 
            "title": "API"
        }, 
        {
            "location": "/api/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/api/#http", 
            "text": "", 
            "title": "HTTP"
        }, 
        {
            "location": "/api/#update-devices-config", 
            "text": "Updates device's config.  POST /api/devices/{token}/config/update\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Update device's config"
        }, 
        {
            "location": "/api/#path-parameters", 
            "text": "Parameter  Description      token  The token of the device     The following example creates two variables on the device. Temperature of the numeric type and LEDOn of the bool type.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '[{ name : Temperature , type : numeric },{ name : LEDOn , type : bool }]' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config/update   Note  You have to replace device_token with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#send-data", 
            "text": "Sends device data.  POST /api/devices/{token}/stream/data\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Send data"
        }, 
        {
            "location": "/api/#path-parameters_1", 
            "text": "Parameter  Description      token  The token of the device     The following example sends Temperature and LEDOn values to the cloud4rpi.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : 2016-11-14T09:59:28.214Z , payload :{ Temperature :24, LEDOn :false}}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/data   Note  You have to replace device_token with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#send-diagnostic-data", 
            "text": "Sends diagnostic data.  POST /api/devices/{token}/stream/system\nHTTP/1.1\nHost: cloud4rpi.io\nAccept: application/json\nContent-Type: application/json", 
            "title": "Send diagnostic data"
        }, 
        {
            "location": "/api/#path-parameters_2", 
            "text": "Parameter  Description      token  The token of the device     The following example sends CPU Temperature and IP Address diagnostic values to the cloud4rpi.  export DEVICE_TOKEN=device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : 2016-11-14T09:59:28.214Z , payload :{ CPU Temperature :51, IP Address : 8.8.8.8 }}' \\\n     http://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/stream/system   Note  You need to replace 'device_token' with your device token displayed on the device page.", 
            "title": "Path parameters"
        }, 
        {
            "location": "/api/#mqtt", 
            "text": "To be supplied", 
            "title": "MQTT"
        }
    ]
}