{
    "docs": [
        {
            "location": "/", 
            "text": "Cloud4RPi Documentation\n\n\nThis website provides documentation for the \nCloud4RPi\n service\na cloud control panel for your IoT projects.\n\n\n\n\nSupported Platforms\n\n\nCloud4RPi can communicates with almost any device via the \nMQTT\n or \nHTTP\n protocol. \n\n\nCurrently we provide detailed instructions and examples for the following languages and platforms:\n\n\n\n\nPython\n on \nRaspberry Pi\n\n\nPython\n on \nNext Thing Co. C.H.I.P.\n\n\nPython\n on \nOnion Omega2\n\n\nMicroPython\n on \nESP8266\n\n\n\n\n\n\nNote\n\n\nBoth Python 2 and Python 3 are supported.\n\n\n\n\nContact us\n if your device or preferred language is not listed, we are here to help.\n\n\nDocumentation Structure\n\n\nThe \nGetting Started\n and \nHow To\n sections are different for each platform. Use the drop-down menu on these sections to select your platform:\n\n\n\n\nWhere to Begin?\n\n\nIf you are new to Cloud4RPi, start with the \nGetting Started\n topic for your platform:\n\n\n\n\nConnecting a Raspberry Pi Board\n\n\nConnecting a C.H.I.P. Board\n\n\nConnecting an Omega2 Board\n\n\nConnecting an ESP8266 Board", 
            "title": "Home"
        }, 
        {
            "location": "/#cloud4rpi-documentation", 
            "text": "This website provides documentation for the  Cloud4RPi  service a cloud control panel for your IoT projects.", 
            "title": "Cloud4RPi Documentation"
        }, 
        {
            "location": "/#supported-platforms", 
            "text": "Cloud4RPi can communicates with almost any device via the  MQTT  or  HTTP  protocol.   Currently we provide detailed instructions and examples for the following languages and platforms:   Python  on  Raspberry Pi  Python  on  Next Thing Co. C.H.I.P.  Python  on  Onion Omega2  MicroPython  on  ESP8266    Note  Both Python 2 and Python 3 are supported.   Contact us  if your device or preferred language is not listed, we are here to help.", 
            "title": "Supported Platforms"
        }, 
        {
            "location": "/#documentation-structure", 
            "text": "The  Getting Started  and  How To  sections are different for each platform. Use the drop-down menu on these sections to select your platform:", 
            "title": "Documentation Structure"
        }, 
        {
            "location": "/#where-to-begin", 
            "text": "If you are new to Cloud4RPi, start with the  Getting Started  topic for your platform:   Connecting a Raspberry Pi Board  Connecting a C.H.I.P. Board  Connecting an Omega2 Board  Connecting an ESP8266 Board", 
            "title": "Where to Begin?"
        }, 
        {
            "location": "/start/rpi/", 
            "text": "Connecting a Raspberry Pi Board\n\n\nFollow the instructions below to connect your device to the \nCloud4RPi\n control panel.\n\n\nPrerequisites\n\n\nIt is advisable to update your system before installing.\n\n\nsudo apt update \n sudo apt upgrade -y\n\n\n\n\nInstall/update the required packages.\n\n\nsudo apt install git python python-pip -y\n\n\n\n\nYou can use alternative methods to \ninstall pip\n.\n\n\n\n\nNote\n\n\nThe Cloud4RPi library is compatible with Python 2.7.9+ and Python 3.2+ versions.\n\n\n\n\n[Optional] Enable interfaces\n\n\n\n\nRun \nsudo raspi-config\n\n\nOpen a section for configuring additional interfaces (\nAdvanced Options\n or \nInterfacing Options | Configure connections to peripherals\n depending on the version).\n\n\nEnable I2C, 1-wire and other necessary interfaces.\n\n\nChoose \nFinish\n.\n\n\nReboot the device with the \nsudo reboot\n command.\n\n\n\n\nGetting the Cloud4RPi Client Library\n\n\nInstall the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 2):\n\n\nsudo pip install cloud4rpi\n\n\n\n\nIf you are using Python 3, use the following command:\n\n\nsudo python3 -m pip install cloud4rpi\n\n\n\n\n\n\nNote\n\n\nFor information on how to work with several versions of Python installed, see \nPython Documentation\n.\n\n\n\n\nIf you get an error while using \npip\n, try to update the \nsetuptools\n and \npip\n packages.\n\n\nsudo pip install --upgrade setuptools pip\n\n\n\n\nHacking Together some Code\n\n\nWe have prepared sample code for several platforms in the \ncloud4rpi-raspberrypi-python\n repository to demonstrate sending data to the Cloud.\n\n\nGet Cloud4RPi examples for your device:\n\n\ngit clone https://github.com/cloud4rpi/cloud4rpi-raspberrypi-python.git \n cd cloud4rpi-raspberrypi-python\n\n\n\n\nBefore running a sample (\ncontrol.py\n), remember to replace the \n__YOUR_DEVICE_TOKEN__\n string with your real device token. Use a text editor (for instance, \nnano\n) to replace \n__YOUR_DEVICE_TOKEN__\n with the token displayed at the top of the device page on \ncloud4rpi.io\n. If you have no token yet, open the \nDevices\n page, create a device using the \nNew Device\n button in the top right corner, and use its token.\n\n\nRunning\n\n\nExecute the script with the Python interpreter, for example:\n\n\nsudo python control.py\n\n\n\n\n\n\nNote\n\n\nIf you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library.\n\n\n\n\nIf the script output looks right, open the \nDevices\n page to see if the device status has changed.\n\n\nInstalling as a Service\n\n\nYou can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the \nservice_install.sh\n script as a parameter.\n\n\nchmod +x service_install.sh\nsudo ./service_install.sh your_script.py\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'your_script.py' with the actual path to your service script.\n\n\n\n\nVideo", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/start/rpi/#connecting-a-raspberry-pi-board", 
            "text": "Follow the instructions below to connect your device to the  Cloud4RPi  control panel.", 
            "title": "Connecting a Raspberry Pi Board"
        }, 
        {
            "location": "/start/rpi/#prerequisites", 
            "text": "It is advisable to update your system before installing.  sudo apt update   sudo apt upgrade -y  Install/update the required packages.  sudo apt install git python python-pip -y  You can use alternative methods to  install pip .   Note  The Cloud4RPi library is compatible with Python 2.7.9+ and Python 3.2+ versions.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/start/rpi/#optional-enable-interfaces", 
            "text": "Run  sudo raspi-config  Open a section for configuring additional interfaces ( Advanced Options  or  Interfacing Options | Configure connections to peripherals  depending on the version).  Enable I2C, 1-wire and other necessary interfaces.  Choose  Finish .  Reboot the device with the  sudo reboot  command.", 
            "title": "[Optional] Enable interfaces"
        }, 
        {
            "location": "/start/rpi/#getting-the-cloud4rpi-client-library", 
            "text": "Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 2):  sudo pip install cloud4rpi  If you are using Python 3, use the following command:  sudo python3 -m pip install cloud4rpi   Note  For information on how to work with several versions of Python installed, see  Python Documentation .   If you get an error while using  pip , try to update the  setuptools  and  pip  packages.  sudo pip install --upgrade setuptools pip", 
            "title": "Getting the Cloud4RPi Client Library"
        }, 
        {
            "location": "/start/rpi/#hacking-together-some-code", 
            "text": "We have prepared sample code for several platforms in the  cloud4rpi-raspberrypi-python  repository to demonstrate sending data to the Cloud.  Get Cloud4RPi examples for your device:  git clone https://github.com/cloud4rpi/cloud4rpi-raspberrypi-python.git   cd cloud4rpi-raspberrypi-python  Before running a sample ( control.py ), remember to replace the  __YOUR_DEVICE_TOKEN__  string with your real device token. Use a text editor (for instance,  nano ) to replace  __YOUR_DEVICE_TOKEN__  with the token displayed at the top of the device page on  cloud4rpi.io . If you have no token yet, open the  Devices  page, create a device using the  New Device  button in the top right corner, and use its token.", 
            "title": "Hacking Together some Code"
        }, 
        {
            "location": "/start/rpi/#running", 
            "text": "Execute the script with the Python interpreter, for example:  sudo python control.py   Note  If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library.   If the script output looks right, open the  Devices  page to see if the device status has changed.", 
            "title": "Running"
        }, 
        {
            "location": "/start/rpi/#installing-as-a-service", 
            "text": "You can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the  service_install.sh  script as a parameter.  chmod +x service_install.sh\nsudo ./service_install.sh your_script.py   Note  You need to replace 'your_script.py' with the actual path to your service script.", 
            "title": "Installing as a Service"
        }, 
        {
            "location": "/start/rpi/#video", 
            "text": "", 
            "title": "Video"
        }, 
        {
            "location": "/start/chip/", 
            "text": "Connecting a C.H.I.P. Board\n\n\nFollow the instructions below to connect your device to the \nCloud4RPi\n control panel.\n\n\nPrerequisites\n\n\nIt is advisable to update your system before installing.\n\n\nsudo apt update \n sudo apt upgrade -y\n\n\n\n\nInstall/update the required packages.\n\n\nsudo apt install git python python-pip -y\n\n\n\n\nYou can use alternative methods to \ninstall pip\n.\n\n\n\n\nNote\n\n\nThe Cloud4RPi library is compatible with Python 2.7.9+ and Python 3.2+ versions.\n\n\n\n\nGetting the Cloud4RPi Client Library\n\n\nInstall the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 2):\n\n\nsudo pip install cloud4rpi\n\n\n\n\nIf you are using Python 3, use the following command:\n\n\nsudo python3 -m pip install cloud4rpi\n\n\n\n\n\n\nNote\n\n\nFor information on how to work with several versions of Python installed, see \nPython Documentation\n.\n\n\n\n\nIf you get an error while using \npip\n, try to update the \nsetuptools\n and \npip\n packages.\n\n\nsudo pip install --upgrade setuptools pip\n\n\n\n\nHacking Together some Code\n\n\nWe have prepared sample code for several platforms in the \ncloud4rpi-chip-python\n repository to demonstrate sending data to the Cloud.\n\n\nGet Cloud4RPi examples for your device.:\n\n\ngit clone https://github.com/cloud4rpi/cloud4rpi-chip-python.git \n cd cloud4rpi-chip-python\n\n\n\n\nBefore running a sample (\ncontrol.py\n), remember to replace the \n__YOUR_DEVICE_TOKEN__\n string with your real device token. Use a text editor (for instance, \nnano\n) to replace \n__YOUR_DEVICE_TOKEN__\n with the token displayed at the top of the device page on \ncloud4rpi.io\n. If you have no token yet, open the \nDevices\n page, create a device using the \nNew Device\n button in the top right corner, and use its token.\n\n\nRunning\n\n\nExecute the script with the Python interpreter, for example:\n\n\nsudo python control.py\n\n\n\n\n\n\nNote\n\n\nIf you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library.\n\n\n\n\nIf the script output looks right, open the \nDevices\n page to see if the device status has changed.\n\n\nInstalling as a Service\n\n\nYou can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the \nservice_install.sh\n script as a parameter.\n\n\nchmod +x service_install.sh\nsudo ./service_install.sh your_script.py\n\n\n\n\n\n\nNote\n\n\nYou need to replace 'your_script.py' with the actual path to your service script.", 
            "title": "C.H.I.P."
        }, 
        {
            "location": "/start/chip/#connecting-a-chip-board", 
            "text": "Follow the instructions below to connect your device to the  Cloud4RPi  control panel.", 
            "title": "Connecting a C.H.I.P. Board"
        }, 
        {
            "location": "/start/chip/#prerequisites", 
            "text": "It is advisable to update your system before installing.  sudo apt update   sudo apt upgrade -y  Install/update the required packages.  sudo apt install git python python-pip -y  You can use alternative methods to  install pip .   Note  The Cloud4RPi library is compatible with Python 2.7.9+ and Python 3.2+ versions.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/start/chip/#getting-the-cloud4rpi-client-library", 
            "text": "Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 2):  sudo pip install cloud4rpi  If you are using Python 3, use the following command:  sudo python3 -m pip install cloud4rpi   Note  For information on how to work with several versions of Python installed, see  Python Documentation .   If you get an error while using  pip , try to update the  setuptools  and  pip  packages.  sudo pip install --upgrade setuptools pip", 
            "title": "Getting the Cloud4RPi Client Library"
        }, 
        {
            "location": "/start/chip/#hacking-together-some-code", 
            "text": "We have prepared sample code for several platforms in the  cloud4rpi-chip-python  repository to demonstrate sending data to the Cloud.  Get Cloud4RPi examples for your device.:  git clone https://github.com/cloud4rpi/cloud4rpi-chip-python.git   cd cloud4rpi-chip-python  Before running a sample ( control.py ), remember to replace the  __YOUR_DEVICE_TOKEN__  string with your real device token. Use a text editor (for instance,  nano ) to replace  __YOUR_DEVICE_TOKEN__  with the token displayed at the top of the device page on  cloud4rpi.io . If you have no token yet, open the  Devices  page, create a device using the  New Device  button in the top right corner, and use its token.", 
            "title": "Hacking Together some Code"
        }, 
        {
            "location": "/start/chip/#running", 
            "text": "Execute the script with the Python interpreter, for example:  sudo python control.py   Note  If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library.   If the script output looks right, open the  Devices  page to see if the device status has changed.", 
            "title": "Running"
        }, 
        {
            "location": "/start/chip/#installing-as-a-service", 
            "text": "You can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the  service_install.sh  script as a parameter.  chmod +x service_install.sh\nsudo ./service_install.sh your_script.py   Note  You need to replace 'your_script.py' with the actual path to your service script.", 
            "title": "Installing as a Service"
        }, 
        {
            "location": "/start/o2/", 
            "text": "Connecting an Omega2 Board\n\n\nFollow the instructions below to connect your device to the \nCloud4RPi\n control panel.\n\n\nPrerequisites\n\n\nInstall/update the required packages.\n\n\nopkg update\nopkg install wget python python-pip\npip install --upgrade setuptools pip\n\n\n\n\nYou can use alternative methods to \ninstall pip\n.\n\n\n\n\nNote\n\n\nThe Cloud4RPi library is compatible with Python 2.7.9+ and Python 3.2+ versions.\n\n\n\n\nGetting the Cloud4RPi Client Library\n\n\nInstall the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 2):\n\n\npip install cloud4rpi\n\n\n\n\nHacking Together some Code\n\n\nWe have prepared sample code for several platforms in the \ncloud4rpi-omega2-python\n repository to demonstrate sending data to the Cloud.\n\n\nGet Cloud4RPi examples for your device:\n\n\nmkdir cloud4rpi-omega2-python \n cd cloud4rpi-omega2-python\nrepo=\nhttps://raw.githubusercontent.com/cloud4rpi/cloud4rpi-omega2-python/master\n\nwget $repo\n/omega2.py\n $repo\n/led.py\n $repo\n/rgb_led.py\n\n\n\n\n\n\n\nNote\n\n\nYou can install \ngit\n if your board has sufficient memory and you prefer using it, and clone this repository with the following command: \nopkg install git git-http ca-bundle \n git clone https://github.com/cloud4rpi/cloud4rpi-omega2-python.git \n cd cloud4rpi-omega2-python\n\n\n\n\nBefore running a sample (\nled.py\n or \nrgb_led.py\n), remember to replace the \n__YOUR_DEVICE_TOKEN__\n string with your real device token. Use a text editor (for instance, \nvim\n) to replace \n__YOUR_DEVICE_TOKEN__\n with the token displayed at the top of the device page on \ncloud4rpi.io\n. If you have no token yet, open the \nDevices\n page, create a device using the \nNew Device\n button in the top right corner, and use its token.\n\n\nRunning\n\n\nExecute the script with the Python interpreter, for example:\n\n\npython led.py\n\n\n\n\n\n\nNote\n\n\nIf you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library.\n\n\n\n\nIf the script output looks right, open the \nDevices\n page to see if the device status has changed.", 
            "title": "Omega2"
        }, 
        {
            "location": "/start/o2/#connecting-an-omega2-board", 
            "text": "Follow the instructions below to connect your device to the  Cloud4RPi  control panel.", 
            "title": "Connecting an Omega2 Board"
        }, 
        {
            "location": "/start/o2/#prerequisites", 
            "text": "Install/update the required packages.  opkg update\nopkg install wget python python-pip\npip install --upgrade setuptools pip  You can use alternative methods to  install pip .   Note  The Cloud4RPi library is compatible with Python 2.7.9+ and Python 3.2+ versions.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/start/o2/#getting-the-cloud4rpi-client-library", 
            "text": "Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 2):  pip install cloud4rpi", 
            "title": "Getting the Cloud4RPi Client Library"
        }, 
        {
            "location": "/start/o2/#hacking-together-some-code", 
            "text": "We have prepared sample code for several platforms in the  cloud4rpi-omega2-python  repository to demonstrate sending data to the Cloud.  Get Cloud4RPi examples for your device:  mkdir cloud4rpi-omega2-python   cd cloud4rpi-omega2-python\nrepo= https://raw.githubusercontent.com/cloud4rpi/cloud4rpi-omega2-python/master \nwget $repo /omega2.py  $repo /led.py  $repo /rgb_led.py    Note  You can install  git  if your board has sufficient memory and you prefer using it, and clone this repository with the following command:  opkg install git git-http ca-bundle   git clone https://github.com/cloud4rpi/cloud4rpi-omega2-python.git   cd cloud4rpi-omega2-python   Before running a sample ( led.py  or  rgb_led.py ), remember to replace the  __YOUR_DEVICE_TOKEN__  string with your real device token. Use a text editor (for instance,  vim ) to replace  __YOUR_DEVICE_TOKEN__  with the token displayed at the top of the device page on  cloud4rpi.io . If you have no token yet, open the  Devices  page, create a device using the  New Device  button in the top right corner, and use its token.", 
            "title": "Hacking Together some Code"
        }, 
        {
            "location": "/start/o2/#running", 
            "text": "Execute the script with the Python interpreter, for example:  python led.py   Note  If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library.   If the script output looks right, open the  Devices  page to see if the device status has changed.", 
            "title": "Running"
        }, 
        {
            "location": "/start/esp8266-upy/", 
            "text": "Connecting an ESP8266\n\n\nFollow the instructions below to connect your device to the \nCloud4RPi\n control panel.\n\n\nPrerequisites\n\n\nYour ESP8266 module should have at least 1Mbyte of flash storage to install the full version of MicroPython.\n\n\n\n\nFlash the latest version of \nMicroPython\n using \nthe official manual\n.\n\n\n\n\nConnect to your Wi-Fi network:\n\n\n from network import WLAN\n\n STA = WLAN(0); STA.active(1)\n\n STA.connect('__SSID__', '__PASSWORD__')\n\n STA.ifconfig()  # Outputs the network configuration. If it is not valid, wait and re-execute\n\n\n\n\n\n\n\nConfigure \nWebREPL\n for easier file uploading.\n\n\n import webrepl_setup\n\n\n\n\n\n\n\nConnect to the ESP8266 via \nWebREPL\n.\n\n\n\n\n\n\nGetting Libraries and Examples\n\n\nDownload the required source code files to your computer:\n\n\n\n\nsimple.py\n: MQTT Library for MicroPython. Save this file as \nmqtt.py\n when downloading.\n\n\ncloud4rpi.py\n: Cloud4RPi client library for MicroPython.\n\n\nmain.py\n: Sample code.\n\n\n\n\nHacking Together some Code\n\n\nOpen the \nmain.py\n file in a text editor (for instance, \nVisual Studio Code\n) and replace the following strings:\n\n\n\n\n__SSID__\n with your Wi-Fi network name.\n\n\n__PWD__\n with your Wi-Fi network password. If you have an open network, remove the \n'__PWD__'\n element without removing the trailing comma so that the \nWIFI_SSID_PASSWORD\n variable becomes a tuple with one element.\n\n\n__YOUR_DEVICE_TOKEN__\n with the token displayed at the top of the device page on \ncloud4rpi.io\n. If you have no token yet, open the \nDevices\n page, create a device using the \nNew Device\n button in the top right corner, and use its token.\n\n\n\n\nSave the file.\n\n\nThe LED \n Button Example's Hardware\n\n\nConnect the LED to \nGPIO12\n and a button to \nGPIO16\n. If you need to use other pins, change the corresponding variables in \nmain.py\n.\n\n\n\n\nRunning\n\n\n\n\nUpload three files (\nmqtt.py\n, \ncloud4rpi.py\n and \nmain.py\n) to your ESP8266 via the \nWebREPL\n.\n\n\n\n\nReset the ESP8266. You can use the console for this:\n\n\n import machine\n\n machine.reset()\n\n\n\n\n\n\n\nCheck that the \ndevice\n goes online and starts sending data.\n\n\n\n\nGo to the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nSwitch\n widget and bind it to the \nLED\n variable.\n\n\nAdd a new \nText\n widget and bind it to the \nButton\n variable. Configure different colors for the \"true\" and \"false\" strings.\n\n\nPress the hardware button and notice the changes on the control panel.\n\n\nUse the \nLED\n switch on the control panel to light the hardware LED.\n\n\n\n\nExplore the code of the \nmain.py\n file and adapt it for your needs. Feel free to \nshare\n your projects and ideas with us!", 
            "title": "ESP8266 on MicroPython"
        }, 
        {
            "location": "/start/esp8266-upy/#connecting-an-esp8266", 
            "text": "Follow the instructions below to connect your device to the  Cloud4RPi  control panel.", 
            "title": "Connecting an ESP8266"
        }, 
        {
            "location": "/start/esp8266-upy/#prerequisites", 
            "text": "Your ESP8266 module should have at least 1Mbyte of flash storage to install the full version of MicroPython.   Flash the latest version of  MicroPython  using  the official manual .   Connect to your Wi-Fi network:   from network import WLAN  STA = WLAN(0); STA.active(1)  STA.connect('__SSID__', '__PASSWORD__')  STA.ifconfig()  # Outputs the network configuration. If it is not valid, wait and re-execute    Configure  WebREPL  for easier file uploading.   import webrepl_setup    Connect to the ESP8266 via  WebREPL .", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/start/esp8266-upy/#getting-libraries-and-examples", 
            "text": "Download the required source code files to your computer:   simple.py : MQTT Library for MicroPython. Save this file as  mqtt.py  when downloading.  cloud4rpi.py : Cloud4RPi client library for MicroPython.  main.py : Sample code.", 
            "title": "Getting Libraries and Examples"
        }, 
        {
            "location": "/start/esp8266-upy/#hacking-together-some-code", 
            "text": "Open the  main.py  file in a text editor (for instance,  Visual Studio Code ) and replace the following strings:   __SSID__  with your Wi-Fi network name.  __PWD__  with your Wi-Fi network password. If you have an open network, remove the  '__PWD__'  element without removing the trailing comma so that the  WIFI_SSID_PASSWORD  variable becomes a tuple with one element.  __YOUR_DEVICE_TOKEN__  with the token displayed at the top of the device page on  cloud4rpi.io . If you have no token yet, open the  Devices  page, create a device using the  New Device  button in the top right corner, and use its token.   Save the file.", 
            "title": "Hacking Together some Code"
        }, 
        {
            "location": "/start/esp8266-upy/#the-led-button-examples-hardware", 
            "text": "Connect the LED to  GPIO12  and a button to  GPIO16 . If you need to use other pins, change the corresponding variables in  main.py .", 
            "title": "The LED &amp; Button Example's Hardware"
        }, 
        {
            "location": "/start/esp8266-upy/#running", 
            "text": "Upload three files ( mqtt.py ,  cloud4rpi.py  and  main.py ) to your ESP8266 via the  WebREPL .   Reset the ESP8266. You can use the console for this:   import machine  machine.reset()    Check that the  device  goes online and starts sending data.   Go to the  Control Panels  page and add a new control panel.  Add a new  Switch  widget and bind it to the  LED  variable.  Add a new  Text  widget and bind it to the  Button  variable. Configure different colors for the \"true\" and \"false\" strings.  Press the hardware button and notice the changes on the control panel.  Use the  LED  switch on the control panel to light the hardware LED.   Explore the code of the  main.py  file and adapt it for your needs. Feel free to  share  your projects and ideas with us!", 
            "title": "Running"
        }, 
        {
            "location": "/start/esp-pio/", 
            "text": "Connecting an ESP8266\n\n\nFollow the instructions below to connect your \nESP8266\n board (like \nNodeMCU Dev Kit\n) to the \nCloud4RPi\n control panel.\n\n\nPrerequisites\n\n\n\n\nUSB-UART Adapter\n (if it is not integrated into your board).\n\n\nAccess to the ESP8266's \nGPIO0\n pin to enter flashing mode.\n\n\n\n\nCreating a Project\n\n\nThe \nCloud4RPi library\n is published in the \nPlatformIO Registry\n. Follow the instructions below to start a new Cloud4RPi-enabled project:\n\n\n\n\nCreate a new PlatformIO project for your board as described in the PlatformIO documentation (\nVisual Studio Code\n, \nAtom\n)\n\n\n\n\nOpen your \nplatformio.ini\n and add the following lines to the end:\n\n\nlib_deps =\n    cloud4rpi-esp-arduino\n\nbuild_flags=\n; Required for PubSub library\n    -D MQTT_MAX_PACKET_SIZE=1024\n    -D MQTT_MAX_TRANSFER_SIZE=128\n; Enables the verbose output to Serial\n    -D CLOUD4RPI_DEBUG=1\n\n\n\n\n\n\n\nSave the \nplatformio.ini\n file and open the \nsrc\\main.cpp\n file.\n\n\n\n\nCopy-paste the \nsample code\n into it.\n\n\nIf you know the pin number connected to an LED on your board, replace the \nBUILTIN_LED\n constant with it.\n\n\n\n\nConnecting to Your Cloud4RPi Account\n\n\n\n\nLog in to your Cloud4RPi account\n or \ncreate a new one\n.\n\n\nCopy \nyour device\n's \nDevice Token\n. You can create a device on the \nDevices\n page and copy its \nDevice Token\n if you do not have one.\n\n\nReplace the \n__YOUR_DEVICE_TOKEN__\n string with your device token.\n\n\nReplace the \n__SSID__\n and \n__PASSWORD__\n strings with your Wi-Fi network data.\n\n\n\n\nRunning\n\n\n\n\nHit the \nBuild\n button and wait until the compilation is completed.\n\n\nConnect the board in the flashing mode (power it with the GPIO0 pin connected to GND) and hit the \nUpload\n button.\n\n\nOnce flashing is complete, open \nSerial Monitor\n and watch the sample code's output.\n\n\nNotice that the \ndevice\n went online and started sending data.\n\n\nGo to the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nChart\n widget and bind it to the \nUptime\n variable.\n\n\nAdd a new \nSwitch\n widget and bind it to the \nLED On\n variable.\n\n\nAdd a new \nText\n widget and bind it to the \nSTATUS\n variable. Configure different colors for the \n\"IDLE\"\n, \n\"RING\"\n and \n\"BOOM!\"\n strings.\n\n\n\n\nVideo", 
            "title": "ESP boards on PlatformIO"
        }, 
        {
            "location": "/start/esp-pio/#connecting-an-esp8266", 
            "text": "Follow the instructions below to connect your  ESP8266  board (like  NodeMCU Dev Kit ) to the  Cloud4RPi  control panel.", 
            "title": "Connecting an ESP8266"
        }, 
        {
            "location": "/start/esp-pio/#prerequisites", 
            "text": "USB-UART Adapter  (if it is not integrated into your board).  Access to the ESP8266's  GPIO0  pin to enter flashing mode.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/start/esp-pio/#creating-a-project", 
            "text": "The  Cloud4RPi library  is published in the  PlatformIO Registry . Follow the instructions below to start a new Cloud4RPi-enabled project:   Create a new PlatformIO project for your board as described in the PlatformIO documentation ( Visual Studio Code ,  Atom )   Open your  platformio.ini  and add the following lines to the end:  lib_deps =\n    cloud4rpi-esp-arduino\n\nbuild_flags=\n; Required for PubSub library\n    -D MQTT_MAX_PACKET_SIZE=1024\n    -D MQTT_MAX_TRANSFER_SIZE=128\n; Enables the verbose output to Serial\n    -D CLOUD4RPI_DEBUG=1    Save the  platformio.ini  file and open the  src\\main.cpp  file.   Copy-paste the  sample code  into it.  If you know the pin number connected to an LED on your board, replace the  BUILTIN_LED  constant with it.", 
            "title": "Creating a Project"
        }, 
        {
            "location": "/start/esp-pio/#connecting-to-your-cloud4rpi-account", 
            "text": "Log in to your Cloud4RPi account  or  create a new one .  Copy  your device 's  Device Token . You can create a device on the  Devices  page and copy its  Device Token  if you do not have one.  Replace the  __YOUR_DEVICE_TOKEN__  string with your device token.  Replace the  __SSID__  and  __PASSWORD__  strings with your Wi-Fi network data.", 
            "title": "Connecting to Your Cloud4RPi Account"
        }, 
        {
            "location": "/start/esp-pio/#running", 
            "text": "Hit the  Build  button and wait until the compilation is completed.  Connect the board in the flashing mode (power it with the GPIO0 pin connected to GND) and hit the  Upload  button.  Once flashing is complete, open  Serial Monitor  and watch the sample code's output.  Notice that the  device  went online and started sending data.  Go to the  Control Panels  page and add a new control panel.  Add a new  Chart  widget and bind it to the  Uptime  variable.  Add a new  Switch  widget and bind it to the  LED On  variable.  Add a new  Text  widget and bind it to the  STATUS  variable. Configure different colors for the  \"IDLE\" ,  \"RING\"  and  \"BOOM!\"  strings.", 
            "title": "Running"
        }, 
        {
            "location": "/start/esp-pio/#video", 
            "text": "", 
            "title": "Video"
        }, 
        {
            "location": "/start/esp-ino/", 
            "text": "Connecting an ESP8266\n\n\nFollow the instructions below to connect your \nESP8266\n board (like \nNodeMCU Dev Kit\n) to the \nCloud4RPi\n control panel.\n\n\nPrerequisites\n\n\n\n\nUSB-UART Adapter\n (if it is not integrated into your board).\n\n\nAccess to ESP8266's \nGPIO0\n pin to enter flashing mode.\n\n\n\n\nGetting Libraries and Examples\n\n\n\n\nOpen \nArduino\n and select your board in the \nTools\n | \nBoard\n menu. \nAdd ESP8266 support\n if required.\n\n\nInstall the Cloud4RPi library from the \nLibrary Manager\n by opening the \nSketch\n | \nInclude Library\n | \nManage Libraries\n menu, entering \ncloud4rpi\n into the search field and installing the \ncloud4rpi-esp-arduino\n package.\n\n\nInstall \nArduinoJson\n and \nPubSubClient\n libraries. You should do it manually because the \nLibrary Manager\n does not manage package dependencies.\n\n\n\n\nConfigure the installed libraries:\n\n\n\n\nOpen the \n%HOMEPATH%\\Documents\\Arduino\\libraries\\PubSubClient\\src\\PubSubClient.h\n (\n~/Documents/Arduino/libraries/PubSubClient/src/PubSubClient.h\n on Mac) file with any text editor (for instance, \nVS Code\n).\n\n\n\n\nAdd the following define directives at the beginning:\n\n\n#define MQTT_MAX_PACKET_SIZE 1024\n#define MQTT_MAX_TRANSFER_SIZE 128\n\n\n\n\n\n\n\nOpen the \n%HOMEPATH%\\Documents\\Arduino\\libraries\\cloud4rpi-esp-arduino\\src\\Cloud4RPi.h\n (\n~/Documents/Arduino/libraries/cloud4rpi-esp-arduino/src/Cloud4RPi.h\n on Mac) file and enable verbose output by adding the \n#define CLOUD4RPI_DEBUG 1\n line at the beginning.\n\n\n\n\n\n\n\n\n\n\nOpening Sample Code\n\n\n\n\nOpen the sample code using the \nFile\n | \nExamples\n | \ncloud4rpi-esp-arduino\n | \nESP8266\n menu item. Restart Arduino IDE if this item did not appear.\n\n\nIf you know the pin number connected to an LED on your board, replace the \nBUILTIN_LED\n constant with it.\n\n\n\n\nConnecting to Your Cloud4RPi Account\n\n\n\n\nLog in to your Cloud4RPi account\n or \ncreate a new one\n.\n\n\nCopy \nyour device\n's \nDevice Token\n. You can create a device on the \nDevices\n page and copy its \nDevice Token\n if you do not have one.\n\n\nReplace the \n__YOUR_DEVICE_TOKEN__\n string with your device token.\n\n\nReplace the \n__SSID__\n and \n__PASSWORD__\n strings with your Wi-Fi network data.\n\n\n\n\nRunning\n\n\n\n\nHit the \nBuild\n button and wait until the compilation is completed.\n\n\nConnect the board in the flashing mode (power it with the GPIO0 pin connected to GND) and hit the \nUpload\n button.\n\n\nOnce flashing is complete, open \nSerial Monitor\n and watch the sample code's output.\n\n\nNotice that the \ndevice\n went online and started sending data.\n\n\nGo to the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nChart\n widget and bind it to the \nUptime\n variable.\n\n\nAdd a new \nSwitch\n widget and bind it to the \nLED On\n variable.\n\n\nAdd a new \nText\n widget and bind it to the \nSTATUS\n variable. Configure different colors for the \n\"IDLE\"\n, \n\"RING\"\n and \n\"BOOM!\"\n strings.", 
            "title": "ESP boards on Arduino"
        }, 
        {
            "location": "/start/esp-ino/#connecting-an-esp8266", 
            "text": "Follow the instructions below to connect your  ESP8266  board (like  NodeMCU Dev Kit ) to the  Cloud4RPi  control panel.", 
            "title": "Connecting an ESP8266"
        }, 
        {
            "location": "/start/esp-ino/#prerequisites", 
            "text": "USB-UART Adapter  (if it is not integrated into your board).  Access to ESP8266's  GPIO0  pin to enter flashing mode.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/start/esp-ino/#getting-libraries-and-examples", 
            "text": "Open  Arduino  and select your board in the  Tools  |  Board  menu.  Add ESP8266 support  if required.  Install the Cloud4RPi library from the  Library Manager  by opening the  Sketch  |  Include Library  |  Manage Libraries  menu, entering  cloud4rpi  into the search field and installing the  cloud4rpi-esp-arduino  package.  Install  ArduinoJson  and  PubSubClient  libraries. You should do it manually because the  Library Manager  does not manage package dependencies.   Configure the installed libraries:   Open the  %HOMEPATH%\\Documents\\Arduino\\libraries\\PubSubClient\\src\\PubSubClient.h  ( ~/Documents/Arduino/libraries/PubSubClient/src/PubSubClient.h  on Mac) file with any text editor (for instance,  VS Code ).   Add the following define directives at the beginning:  #define MQTT_MAX_PACKET_SIZE 1024\n#define MQTT_MAX_TRANSFER_SIZE 128    Open the  %HOMEPATH%\\Documents\\Arduino\\libraries\\cloud4rpi-esp-arduino\\src\\Cloud4RPi.h  ( ~/Documents/Arduino/libraries/cloud4rpi-esp-arduino/src/Cloud4RPi.h  on Mac) file and enable verbose output by adding the  #define CLOUD4RPI_DEBUG 1  line at the beginning.", 
            "title": "Getting Libraries and Examples"
        }, 
        {
            "location": "/start/esp-ino/#opening-sample-code", 
            "text": "Open the sample code using the  File  |  Examples  |  cloud4rpi-esp-arduino  |  ESP8266  menu item. Restart Arduino IDE if this item did not appear.  If you know the pin number connected to an LED on your board, replace the  BUILTIN_LED  constant with it.", 
            "title": "Opening Sample Code"
        }, 
        {
            "location": "/start/esp-ino/#connecting-to-your-cloud4rpi-account", 
            "text": "Log in to your Cloud4RPi account  or  create a new one .  Copy  your device 's  Device Token . You can create a device on the  Devices  page and copy its  Device Token  if you do not have one.  Replace the  __YOUR_DEVICE_TOKEN__  string with your device token.  Replace the  __SSID__  and  __PASSWORD__  strings with your Wi-Fi network data.", 
            "title": "Connecting to Your Cloud4RPi Account"
        }, 
        {
            "location": "/start/esp-ino/#running", 
            "text": "Hit the  Build  button and wait until the compilation is completed.  Connect the board in the flashing mode (power it with the GPIO0 pin connected to GND) and hit the  Upload  button.  Once flashing is complete, open  Serial Monitor  and watch the sample code's output.  Notice that the  device  went online and started sending data.  Go to the  Control Panels  page and add a new control panel.  Add a new  Chart  widget and bind it to the  Uptime  variable.  Add a new  Switch  widget and bind it to the  LED On  variable.  Add a new  Text  widget and bind it to the  STATUS  variable. Configure different colors for the  \"IDLE\" ,  \"RING\"  and  \"BOOM!\"  strings.", 
            "title": "Running"
        }, 
        {
            "location": "/howto/rpi/", 
            "text": "Control LED from WEB using Raspberry Pi\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n device.\n\n\nBreadboard, connecting wires, 330\u03a9..1k\u03a9 resistor.\n\n\n\n\nCode\n\n\n\n\nOpen the \ncontrol.py\n sample file.\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with the device token from the \nDevice\n page.\n\n\nConnect an LED to a GPIO pin and set the correct value to the \nLED_PIN\n variable. The default pin is \nGPIO18\n (Pin 12).\n\n\nRun \nsudo python control.py\n. A new \nLED On\n variable should appear on the \nDevice\n page.\n\n\nOpen the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nSwitch\n widget and choose the newly added \nLED On\n variable.\n\n\n\n\nYou can now switch the LED state using this widget.\n\n\nMonitor Device Events using Colored Status\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n device.\n\n\n\n\nCode\n\n\n\n\nOpen the \ncontrol.py\n sample file.\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with the device token from the \nDevice\n page.\n\n\nRun \nsudo python control.py\n. A new \nSTATUS\n variable should appear on the \nDevice\n page.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nText\n widget and choose the newly added \nSTATUS\n variable.\n\n\nChange the pre-defined status color items according to the event names from the code above.\n\n\nAs a result, you should have the following items:\n\n{ IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}\n\n\n\n\nNow this widget displays an incoming status with color.\n\n\nConnect DS18B20 Temperature Sensor\n\n\nThis example shows how to use the \nDS18B20\n temperature sensor with the Cloud4RPi service.\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n device with 1-Wire support.\n\n\nEnabled\n 1-Wire interface.\n\n\nBreadboard, connecting wires, a pull-up resistor (4.7k\u03a9).\n\n\n\n\nSchematics\n\n\n\n\n\n\nConnect the \nGND\n pin to any GND pin on your board.\n\n\nConnect the \nVdd\n pin to a 5V or 3.3V pin.\n\n\nConnect the \nDQ\n pin to the pull-up resistor and the resistor to \nVdd\n.\n\n\nConnect the \nDQ\n pin to the 1-Wire pin. The default pin is \nGPIO4\n (Pin 7).\n\n\n\n\nYou can connect several 1-Wire devices to the bus without additional resistors.\n\n\nCode\n\n\n\n\nOpen the \ncontrol.py\n sample file.\n\n\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with your personal device token from the \nDevice\n page.\n\n\n\n\n\n\nRun \nsudo python control.py\n. New \nRoom Temp\n and \nCPU Temp\n variables should appear on the \nDevice\n page.\n\n\n\n\nOpen the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nChart\n widget and choose the newly added \nRoom Temp\n variable.\n\n\nAdd a new \nGauge\n widget and choose the newly added \nCPU Temp\n variable.\n\n\n\n\nYou can now monitor CPU and room temperature using these widgets.\n\n\n\n\nNote\n\n\nIf you need to start your script automatically when the system loads, install the \ncontrol.py\n script as a service using our \nservice_install.sh\n script. Refer to the \nInstalling as a Service\n section for more details.\n\n\n\n\nSecure your MQTT connection\n\n\nCloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the \ncloud4rpi.connect()\n method call as follows:\n\n\ndevice = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'})\n\n\n\n\nThe \ntls_config\n dictionary holds parameters for the Paho MQTT's \ntls_set()\n function.", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/howto/rpi/#control-led-from-web-using-raspberry-pi", 
            "text": "", 
            "title": "Control LED from WEB using Raspberry Pi"
        }, 
        {
            "location": "/howto/rpi/#prerequisites", 
            "text": "Configured and  connected  device.  Breadboard, connecting wires, 330\u03a9..1k\u03a9 resistor.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/rpi/#code", 
            "text": "Open the  control.py  sample file.  Replace  __YOUR_DEVICE_TOKEN__  with the device token from the  Device  page.  Connect an LED to a GPIO pin and set the correct value to the  LED_PIN  variable. The default pin is  GPIO18  (Pin 12).  Run  sudo python control.py . A new  LED On  variable should appear on the  Device  page.  Open the  Control Panels  page and add a new control panel.  Add a new  Switch  widget and choose the newly added  LED On  variable.   You can now switch the LED state using this widget.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/rpi/#monitor-device-events-using-colored-status", 
            "text": "", 
            "title": "Monitor Device Events using Colored Status"
        }, 
        {
            "location": "/howto/rpi/#prerequisites_1", 
            "text": "Configured and  connected  device.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/rpi/#code_1", 
            "text": "Open the  control.py  sample file.  Replace  __YOUR_DEVICE_TOKEN__  with the device token from the  Device  page.  Run  sudo python control.py . A new  STATUS  variable should appear on the  Device  page.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Text  widget and choose the newly added  STATUS  variable.  Change the pre-defined status color items according to the event names from the code above.  As a result, you should have the following items: { IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}   Now this widget displays an incoming status with color.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/rpi/#connect-ds18b20-temperature-sensor", 
            "text": "This example shows how to use the  DS18B20  temperature sensor with the Cloud4RPi service.", 
            "title": "Connect DS18B20 Temperature Sensor"
        }, 
        {
            "location": "/howto/rpi/#prerequisites_2", 
            "text": "Configured and  connected  device with 1-Wire support.  Enabled  1-Wire interface.  Breadboard, connecting wires, a pull-up resistor (4.7k\u03a9).", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/rpi/#schematics", 
            "text": "Connect the  GND  pin to any GND pin on your board.  Connect the  Vdd  pin to a 5V or 3.3V pin.  Connect the  DQ  pin to the pull-up resistor and the resistor to  Vdd .  Connect the  DQ  pin to the 1-Wire pin. The default pin is  GPIO4  (Pin 7).   You can connect several 1-Wire devices to the bus without additional resistors.", 
            "title": "Schematics"
        }, 
        {
            "location": "/howto/rpi/#code_2", 
            "text": "Open the  control.py  sample file.   Replace  __YOUR_DEVICE_TOKEN__  with your personal device token from the  Device  page.    Run  sudo python control.py . New  Room Temp  and  CPU Temp  variables should appear on the  Device  page.   Open the  Control Panels  page and add a new control panel.  Add a new  Chart  widget and choose the newly added  Room Temp  variable.  Add a new  Gauge  widget and choose the newly added  CPU Temp  variable.   You can now monitor CPU and room temperature using these widgets.   Note  If you need to start your script automatically when the system loads, install the  control.py  script as a service using our  service_install.sh  script. Refer to the  Installing as a Service  section for more details.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/rpi/#secure-your-mqtt-connection", 
            "text": "Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the  cloud4rpi.connect()  method call as follows:  device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'})  The  tls_config  dictionary holds parameters for the Paho MQTT's  tls_set()  function.", 
            "title": "Secure your MQTT connection"
        }, 
        {
            "location": "/howto/chip/", 
            "text": "Control LED from WEB using C.H.I.P.\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n device.\n\n\nBreadboard, connecting wires, 330\u03a9..1k\u03a9 resistor.\n\n\n\n\nCode\n\n\n\n\nOpen the \ncontrol.py\n sample file.\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with the device token from the \nDevice\n page.\n\n\nConnect an LED to a GPIO pin and set the correct value to the \nLED_PIN\n variable. The default pin is \nXIO-P0\n.\n\n\nRun \nsudo python control.py\n. A new \nLED On\n variable should appear on the \nDevice\n page.\n\n\nOpen the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nSwitch\n widget and choose the newly added \nLED On\n variable.\n\n\n\n\nYou can now switch the LED state using this widget.\n\n\nMonitor Device Events using Colored Status\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n device.\n\n\n\n\nCode\n\n\n\n\nOpen the \ncontrol.py\n sample file.\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with the device token from the \nDevice\n page.\n\n\nRun \nsudo python control.py\n. A new \nSTATUS\n variable should appear on the \nDevice\n page.\n\n\nOpen the \nControl Panels\n page and add a new control panel or open an existing one.\n\n\nAdd a new \nText\n widget and choose the newly added \nSTATUS\n variable.\n\n\nChange the pre-defined status color items according to the event names from the code above.\n\n\nAs a result, you should have the following items:\n\n{ IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}\n\n\n\n\nNow this widget displays an incoming status with color.\n\n\nConnect DS18B20 Temperature Sensor\n\n\nThis example shows how to use the \nDS18B20\n temperature sensor with the Cloud4RPi service.\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n device.\n\n\nBreadboard, connecting wires, a pull-up resistor (4.7k\u03a9).\n\n\n\n\nSchematics\n\n\n\n\n\n\nConnect the \nGND\n pin to any GND pin on your board.\n\n\nConnect the \nVdd\n pin to a 5V or 3.3V pin.\n\n\nConnect the \nDQ\n pin to the pull-up resistor and the resistor to \nVdd\n.\n\n\nConnect the \nDQ\n pin to the \nLCD-D2\n pin.\n\n\n\n\nYou can connect several 1-Wire devices to the bus without additional resistors.\n\n\nCode\n\n\n\n\nOpen the \ncontrol.py\n.\n\n\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with the device token from the \nDevice\n page.\n\n\n\n\n\n\nRun \nsudo python control.py\n. New \nRoom Temp\n and \nCPU Temp\n variables should appear on the \nDevice\n page.\n\n\n\n\nOpen the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nChart\n widget and choose the newly added \nRoom Temp\n variable.\n\n\nAdd a new \nGauge\n widget and choose the newly added \nCPU Temp\n variable.\n\n\n\n\nYou can now monitor CPU and room temperature using these widgets.\n\n\n\n\nNote\n\n\nIf you need to start your script automatically when the system loads, install the \ncontrol.py\n script as a service using our \nservice_install.sh\n script. Refer to the \nInstalling as a Service\n section for more details.\n\n\n\n\nSecure your MQTT connection\n\n\nCloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the \ncloud4rpi.connect()\n method call as follows:\n\n\ndevice = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'})\n\n\n\n\nThe \ntls_config\n dictionary holds parameters for the Paho MQTT's \ntls_set()\n function.", 
            "title": "C.H.I.P."
        }, 
        {
            "location": "/howto/chip/#control-led-from-web-using-chip", 
            "text": "", 
            "title": "Control LED from WEB using C.H.I.P."
        }, 
        {
            "location": "/howto/chip/#prerequisites", 
            "text": "Configured and  connected  device.  Breadboard, connecting wires, 330\u03a9..1k\u03a9 resistor.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/chip/#code", 
            "text": "Open the  control.py  sample file.  Replace  __YOUR_DEVICE_TOKEN__  with the device token from the  Device  page.  Connect an LED to a GPIO pin and set the correct value to the  LED_PIN  variable. The default pin is  XIO-P0 .  Run  sudo python control.py . A new  LED On  variable should appear on the  Device  page.  Open the  Control Panels  page and add a new control panel.  Add a new  Switch  widget and choose the newly added  LED On  variable.   You can now switch the LED state using this widget.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/chip/#monitor-device-events-using-colored-status", 
            "text": "", 
            "title": "Monitor Device Events using Colored Status"
        }, 
        {
            "location": "/howto/chip/#prerequisites_1", 
            "text": "Configured and  connected  device.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/chip/#code_1", 
            "text": "Open the  control.py  sample file.  Replace  __YOUR_DEVICE_TOKEN__  with the device token from the  Device  page.  Run  sudo python control.py . A new  STATUS  variable should appear on the  Device  page.  Open the  Control Panels  page and add a new control panel or open an existing one.  Add a new  Text  widget and choose the newly added  STATUS  variable.  Change the pre-defined status color items according to the event names from the code above.  As a result, you should have the following items: { IDLE: #00ff00}  { RING: #ff6600}  { BOOM!: #ff0000}   Now this widget displays an incoming status with color.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/chip/#connect-ds18b20-temperature-sensor", 
            "text": "This example shows how to use the  DS18B20  temperature sensor with the Cloud4RPi service.", 
            "title": "Connect DS18B20 Temperature Sensor"
        }, 
        {
            "location": "/howto/chip/#prerequisites_2", 
            "text": "Configured and  connected  device.  Breadboard, connecting wires, a pull-up resistor (4.7k\u03a9).", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/chip/#schematics", 
            "text": "Connect the  GND  pin to any GND pin on your board.  Connect the  Vdd  pin to a 5V or 3.3V pin.  Connect the  DQ  pin to the pull-up resistor and the resistor to  Vdd .  Connect the  DQ  pin to the  LCD-D2  pin.   You can connect several 1-Wire devices to the bus without additional resistors.", 
            "title": "Schematics"
        }, 
        {
            "location": "/howto/chip/#code_2", 
            "text": "Open the  control.py .   Replace  __YOUR_DEVICE_TOKEN__  with the device token from the  Device  page.    Run  sudo python control.py . New  Room Temp  and  CPU Temp  variables should appear on the  Device  page.   Open the  Control Panels  page and add a new control panel.  Add a new  Chart  widget and choose the newly added  Room Temp  variable.  Add a new  Gauge  widget and choose the newly added  CPU Temp  variable.   You can now monitor CPU and room temperature using these widgets.   Note  If you need to start your script automatically when the system loads, install the  control.py  script as a service using our  service_install.sh  script. Refer to the  Installing as a Service  section for more details.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/chip/#secure-your-mqtt-connection", 
            "text": "Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the  cloud4rpi.connect()  method call as follows:  device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'})  The  tls_config  dictionary holds parameters for the Paho MQTT's  tls_set()  function.", 
            "title": "Secure your MQTT connection"
        }, 
        {
            "location": "/howto/o2/", 
            "text": "Control Omega LED from WEB\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n Omega2 board.\n\n\n\n\nCode\n\n\n\n\nOpen the \ncontrol.py\n sample file.\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with the device token from the \nDevice\n page.\n\n\nRun \npython led.py\n. A new \nOmega LED\n variable should appear on the \nDevice\n page.\n\n\nOpen the \nControl Panels\n page and add a new control panel.\n\n\nAdd a new \nSwitch\n widget and choose the newly added \nOmega LED\n variable.\n\n\n\n\nYou can now switch the onboard LED state using this widget.\n\n\nControl Expansion Board RGB LED from WEB\n\n\nPrerequisites\n\n\n\n\nConfigured and \nconnected\n Omega2 board.\n\n\nExpansion Board\n\n\n\n\nCode\n\n\n\n\n\n\n\nOpen the \nled.py\n sample file.\n\n\nReplace \n__YOUR_DEVICE_TOKEN__\n with the device token from the from the \nDevice\n page.\n\n\nRun \npython control.py\n. Three new variables should appear on the \nDevice\n page: \nRGB LED - Red\n, \nRGB LED - Green\n and \nRGB LED - Blue\n.\n\n\nOpen the \nControl Panels\n page and add a new control panel.\n\n\nAdd a \nSwitch\n widget for each variable.\n\n\n\n\nYou can now change the RGB LED color using these widgets.\n\n\nSecure your MQTT connection\n\n\nCloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, follow the steps below:\n\n\n\n\nInstall a package that provides the CA certificates for SSL and TLS protocols:\n\n\n\n\nsh\n   opkg update \n opkg install ca-certificates\n\n\n\n\n\n\nEnable TLS by changing the \ncloud4rpi.connect()\n method call as follows:\n\n\npython\ndevice = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'})\n\n\nThe \ntls_config\n dictionary holds parameters for the Paho MQTT's \ntls_set()\n function.", 
            "title": "Omega2"
        }, 
        {
            "location": "/howto/o2/#control-omega-led-from-web", 
            "text": "", 
            "title": "Control Omega LED from WEB"
        }, 
        {
            "location": "/howto/o2/#prerequisites", 
            "text": "Configured and  connected  Omega2 board.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/o2/#code", 
            "text": "Open the  control.py  sample file.  Replace  __YOUR_DEVICE_TOKEN__  with the device token from the  Device  page.  Run  python led.py . A new  Omega LED  variable should appear on the  Device  page.  Open the  Control Panels  page and add a new control panel.  Add a new  Switch  widget and choose the newly added  Omega LED  variable.   You can now switch the onboard LED state using this widget.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/o2/#control-expansion-board-rgb-led-from-web", 
            "text": "", 
            "title": "Control Expansion Board RGB LED from WEB"
        }, 
        {
            "location": "/howto/o2/#prerequisites_1", 
            "text": "Configured and  connected  Omega2 board.  Expansion Board", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/howto/o2/#code_1", 
            "text": "Open the  led.py  sample file.  Replace  __YOUR_DEVICE_TOKEN__  with the device token from the from the  Device  page.  Run  python control.py . Three new variables should appear on the  Device  page:  RGB LED - Red ,  RGB LED - Green  and  RGB LED - Blue .  Open the  Control Panels  page and add a new control panel.  Add a  Switch  widget for each variable.   You can now change the RGB LED color using these widgets.", 
            "title": "Code"
        }, 
        {
            "location": "/howto/o2/#secure-your-mqtt-connection", 
            "text": "Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, follow the steps below:   Install a package that provides the CA certificates for SSL and TLS protocols:   sh\n   opkg update   opkg install ca-certificates    Enable TLS by changing the  cloud4rpi.connect()  method call as follows:  python\ndevice = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'})  The  tls_config  dictionary holds parameters for the Paho MQTT's  tls_set()  function.", 
            "title": "Secure your MQTT connection"
        }, 
        {
            "location": "/api/mqtt/", 
            "text": "Prerequisites\n\n\nThe examples in this section are presented for the \nEclipse Mosquitto\u2122\n MQTT client. Install the client if you are going to run the examples:\n\n\nsudo apt-get install mosquitto-clients\n\n\n\n\nCloud4RPi MQTT Broker\n\n\nUse the following data to connect to the MQTT broker:\n\n\n\n\nHost:\n \n\n\nWith SSL encryption: \nmqtts://mq.cloud4rpi.io\n\n\nWithout SSL encryption: \nmqtt://mq.cloud4rpi.io\n\n\n\n\n\n\nPort:\n \n\n\nWith SSL encryption: \n8883\n\n\nWithout SSL encryption: \n1883\n\n\n\n\n\n\nClient ID\n: Your \nDevice\n Token\n\n\n\n\n\n\nWarning\n\n\nSince the \nClient ID\n is used for authentication, you should not open more than one connection with a single \nDevice Token\n at the same time.\n\n\n\n\n\n\nNote\n\n\nLogin\n and \nPassword\n are not used, you can leave them empty.\n\n\n\n\nVariables Configuration\n\n\nUpdate the device's configuration by sending messages to the following topic:\n\n\ndevices/{token}/config\n\n\n\n\nTopic Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nMessage Structure\n\n\n{\n    \npayload\n: {\n        [\n            {\nname\n: name, \ntype\n: type},\n            {\nname\n: name, \ntype\n: type},\n            // ...\n            {\nname\n: name, \ntype\n: type}\n        ]\n    }\n}\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\nname\n\n\nVariable name\n\n\nstring\n\n\nAny string\n\n\n\n\n\n\ntype\n\n\nVariable type\n\n\nstring\n\n\n\"bool\", \"numeric\" or \"string\"\n\n\n\n\n\n\n\n\nExample\n\n\nThe following example creates two variables on the device:\n\n\n\n\nTemperature\n (numeric)\n\n\nLEDOn\n (boolean)\n\n\n\n\nexport DEVICE_TOKEN=your_device_token\nmosquitto_pub -q 1 -d -t \ndevices/$DEVICE_TOKEN/config\n -h mq.cloud4rpi.io -i \n$DEVICE_TOKEN\n \\\n              -m '{\npayload\n:[{\nname\n:\nTemperature\n,\ntype\n:\nnumeric\n},{\nname\n:\nLEDOn\n,\ntype\n:\nbool\n}]}'\n\n\n\n\n\n\nNote\n\n\nReplace \nyour_device_token\n with your device token displayed on the \ndevice page\n.\n\n\n\n\nVariable Values\n\n\n\n\nNote\n\n\nBefore sending variable values, configure variables by sending the \nVariables Configuration message\n.\n\n\n\n\nSend messages with your variable values to the following topic:\n\n\ndevices/{token}/data\n\n\n\n\nTopic Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nMessage Structure\n\n\n{\n    \nts\n: datetime_isoformat,\n    \npayload\n: {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\ndatetime_isoformat\n\n\nTimestamp (optional)\n\n\nstring\n\n\nTime in the \nISO 8601\n format with the \ntime zone designator\n specified explicitly\n\n\n\n\n\n\nvar_name\n\n\nVariable name\n\n\nstring\n\n\nOne of the variables\n\n\n\n\n\n\nvar_value\n\n\nVariable value\n\n\ncorresponding\n\n\nAny\n\n\n\n\n\n\n\n\nExample\n\n\nThe following example sends the values of two variables:\n\n\n\n\nTemperature\n: \n24\n\n\nLEDOn\n: \ntrue\n\n\n\n\nexport DEVICE_TOKEN=your_device_token\nmosquitto_pub -q 1 -d -t \ndevices/$DEVICE_TOKEN/data\n -h mq.cloud4rpi.io -i \n$DEVICE_TOKEN\n \\\n              -m '{\npayload\n:{\nTemperature\n:24,\nLEDOn\n:true}}'\n\n\n\n\n\n\nNote\n\n\nReplace \nyour_device_token\n with your device token displayed on the \ndevice page\n.\n\n\n\n\nDiagnostic Data\n\n\nSend messages with your device's diagnostic data to the following topic:\n\n\ndevices/{token}/diagnostics\n\n\n\n\nTopic Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nMessage Structure\n\n\n{\n    \nts\n: datetime_isoformat,\n    \npayload\n: {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\ndatetime_isoformat\n\n\nTimestamp (optional)\n\n\nstring\n\n\nTime in the \nISO 8601\n format with the \ntime zone designator\n specified explicitly\n\n\n\n\n\n\nvar_name\n\n\nVariable name\n\n\nstring\n\n\nAny\n\n\n\n\n\n\nvar_value\n\n\nVariable value\n\n\nany\n\n\nAny\n\n\n\n\n\n\n\n\nExample\n\n\nThe following example sends the following diagnostic values to Cloud4RPI:\n\n\n\n\nCPU Temperature\n: \n41\n\n\nIP Address\n: \n192.168.1.50\n\n\n\n\nexport DEVICE_TOKEN=your_device_token\nmosquitto_pub -q 1 -d -t \ndevices/$DEVICE_TOKEN/diagnostics\n -h mq.cloud4rpi.io -i \n$DEVICE_TOKEN\n \\\n              -m '{\npayload\n:{\nCPU Temperature\n:41,\nIP Address\n:\n192.168.1.50\n}}'\n\n\n\n\n\n\nNote\n\n\nReplace \nyour_device_token\n with your device token displayed on the \ndevice page\n.\n\n\n\n\nCommands Stream\n\n\nReceive commands sent from the \nControl Panels\n in real time by subscribing to the following topic:\n\n\ndevices/{token}/commands\n\n\n\n\nTopic Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nExample\n\n\nExecute the following command to subscribe:\n\n\nexport DEVICE_TOKEN=your_device_token\nmosquitto_sub -d -t \ndevices/$DEVICE_TOKEN/commands\n -h mq.cloud4rpi.io -i \n$DEVICE_TOKEN\n\n\n\n\n\nThis program works in the foreground and blocks the input while the connection to the broker persists. So, you instantly get commands sent from the UI in the following format:\n\n\nMessage Structure\n\n\n{var_name:var_new_value}\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\nvar_name\n\n\nVariable name\n\n\nstring\n\n\nAny\n\n\n\n\n\n\nvar_new_value\n\n\nNew variable value\n\n\ncorresponding\n\n\nAny", 
            "title": "MQTT Protocol"
        }, 
        {
            "location": "/api/mqtt/#prerequisites", 
            "text": "The examples in this section are presented for the  Eclipse Mosquitto\u2122  MQTT client. Install the client if you are going to run the examples:  sudo apt-get install mosquitto-clients", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/api/mqtt/#cloud4rpi-mqtt-broker", 
            "text": "Use the following data to connect to the MQTT broker:   Host:    With SSL encryption:  mqtts://mq.cloud4rpi.io  Without SSL encryption:  mqtt://mq.cloud4rpi.io    Port:    With SSL encryption:  8883  Without SSL encryption:  1883    Client ID : Your  Device  Token    Warning  Since the  Client ID  is used for authentication, you should not open more than one connection with a single  Device Token  at the same time.    Note  Login  and  Password  are not used, you can leave them empty.", 
            "title": "Cloud4RPi MQTT Broker"
        }, 
        {
            "location": "/api/mqtt/#variables-configuration", 
            "text": "Update the device's configuration by sending messages to the following topic:  devices/{token}/config", 
            "title": "Variables Configuration"
        }, 
        {
            "location": "/api/mqtt/#topic-parameters", 
            "text": "Name  Description      token  The  device  token", 
            "title": "Topic Parameters"
        }, 
        {
            "location": "/api/mqtt/#message-structure", 
            "text": "{\n     payload : {\n        [\n            { name : name,  type : type},\n            { name : name,  type : type},\n            // ...\n            { name : name,  type : type}\n        ]\n    }\n}", 
            "title": "Message Structure"
        }, 
        {
            "location": "/api/mqtt/#parameters", 
            "text": "Name  Description  Type  Possible Values      name  Variable name  string  Any string    type  Variable type  string  \"bool\", \"numeric\" or \"string\"", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/mqtt/#example", 
            "text": "The following example creates two variables on the device:   Temperature  (numeric)  LEDOn  (boolean)   export DEVICE_TOKEN=your_device_token\nmosquitto_pub -q 1 -d -t  devices/$DEVICE_TOKEN/config  -h mq.cloud4rpi.io -i  $DEVICE_TOKEN  \\\n              -m '{ payload :[{ name : Temperature , type : numeric },{ name : LEDOn , type : bool }]}'   Note  Replace  your_device_token  with your device token displayed on the  device page .", 
            "title": "Example"
        }, 
        {
            "location": "/api/mqtt/#variable-values", 
            "text": "Note  Before sending variable values, configure variables by sending the  Variables Configuration message .   Send messages with your variable values to the following topic:  devices/{token}/data", 
            "title": "Variable Values"
        }, 
        {
            "location": "/api/mqtt/#topic-parameters_1", 
            "text": "Name  Description      token  The  device  token", 
            "title": "Topic Parameters"
        }, 
        {
            "location": "/api/mqtt/#message-structure_1", 
            "text": "{\n     ts : datetime_isoformat,\n     payload : {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}", 
            "title": "Message Structure"
        }, 
        {
            "location": "/api/mqtt/#parameters_1", 
            "text": "Name  Description  Type  Possible Values      datetime_isoformat  Timestamp (optional)  string  Time in the  ISO 8601  format with the  time zone designator  specified explicitly    var_name  Variable name  string  One of the variables    var_value  Variable value  corresponding  Any", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/mqtt/#example_1", 
            "text": "The following example sends the values of two variables:   Temperature :  24  LEDOn :  true   export DEVICE_TOKEN=your_device_token\nmosquitto_pub -q 1 -d -t  devices/$DEVICE_TOKEN/data  -h mq.cloud4rpi.io -i  $DEVICE_TOKEN  \\\n              -m '{ payload :{ Temperature :24, LEDOn :true}}'   Note  Replace  your_device_token  with your device token displayed on the  device page .", 
            "title": "Example"
        }, 
        {
            "location": "/api/mqtt/#diagnostic-data", 
            "text": "Send messages with your device's diagnostic data to the following topic:  devices/{token}/diagnostics", 
            "title": "Diagnostic Data"
        }, 
        {
            "location": "/api/mqtt/#topic-parameters_2", 
            "text": "Name  Description      token  The  device  token", 
            "title": "Topic Parameters"
        }, 
        {
            "location": "/api/mqtt/#message-structure_2", 
            "text": "{\n     ts : datetime_isoformat,\n     payload : {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}", 
            "title": "Message Structure"
        }, 
        {
            "location": "/api/mqtt/#parameters_2", 
            "text": "Name  Description  Type  Possible Values      datetime_isoformat  Timestamp (optional)  string  Time in the  ISO 8601  format with the  time zone designator  specified explicitly    var_name  Variable name  string  Any    var_value  Variable value  any  Any", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/mqtt/#example_2", 
            "text": "The following example sends the following diagnostic values to Cloud4RPI:   CPU Temperature :  41  IP Address :  192.168.1.50   export DEVICE_TOKEN=your_device_token\nmosquitto_pub -q 1 -d -t  devices/$DEVICE_TOKEN/diagnostics  -h mq.cloud4rpi.io -i  $DEVICE_TOKEN  \\\n              -m '{ payload :{ CPU Temperature :41, IP Address : 192.168.1.50 }}'   Note  Replace  your_device_token  with your device token displayed on the  device page .", 
            "title": "Example"
        }, 
        {
            "location": "/api/mqtt/#commands-stream", 
            "text": "Receive commands sent from the  Control Panels  in real time by subscribing to the following topic:  devices/{token}/commands", 
            "title": "Commands Stream"
        }, 
        {
            "location": "/api/mqtt/#topic-parameters_3", 
            "text": "Name  Description      token  The  device  token", 
            "title": "Topic Parameters"
        }, 
        {
            "location": "/api/mqtt/#example_3", 
            "text": "Execute the following command to subscribe:  export DEVICE_TOKEN=your_device_token\nmosquitto_sub -d -t  devices/$DEVICE_TOKEN/commands  -h mq.cloud4rpi.io -i  $DEVICE_TOKEN   This program works in the foreground and blocks the input while the connection to the broker persists. So, you instantly get commands sent from the UI in the following format:", 
            "title": "Example"
        }, 
        {
            "location": "/api/mqtt/#message-structure_3", 
            "text": "{var_name:var_new_value}", 
            "title": "Message Structure"
        }, 
        {
            "location": "/api/mqtt/#parameters_3", 
            "text": "Name  Description  Type  Possible Values      var_name  Variable name  string  Any    var_new_value  New variable value  corresponding  Any", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/http/", 
            "text": "Variables Configuration\n\n\nUpdates the device's configuration.\n\n\nRequest Destination\n\n\n\n\nMethod\n: POST\n\n\nURL\n: \nhttps://cloud4rpi.io/api/devices/{token}/config\n\n\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nHeaders\n\n\nContent-Type: application/json\n\n\n\n\nRequest Body\n\n\n{\n    \npayload\n: {\n        [\n            {\nname\n: name, \ntype\n: type},\n            {\nname\n: name, \ntype\n: type},\n            // ...\n            {\nname\n: name, \ntype\n: type}\n        ]\n    }\n}\n\n\n\n\nor\n\n\n[\n    {\nname\n: name, \ntype\n: type},\n    {\nname\n: name, \ntype\n: type},\n    // ...\n    {\nname\n: name, \ntype\n: type}\n]\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\nname\n\n\nVariable name\n\n\nstring\n\n\nAny string\n\n\n\n\n\n\ntype\n\n\nVariable type\n\n\nstring\n\n\n\"bool\", \"numeric\" or \"string\"\n\n\n\n\n\n\n\n\nExample\n\n\nThe following example creates two variables on the device:\n\n\n\n\nTemperature\n (numeric)\n\n\nLEDOn\n (boolean)\n\n\n\n\nexport DEVICE_TOKEN=your_device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '[{\nname\n:\nTemperature\n,\ntype\n:\nnumeric\n},{\nname\n:\nLEDOn\n,\ntype\n:\nbool\n}]' \\\n     https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config\n\n\n\n\n\n\nNote\n\n\nReplace \nyour_device_token\n with your device token displayed on the \ndevice page\n.\n\n\n\n\nResponse Body\n\n\n{ \nmessage\n: \nOK\n }\n\n\n\n\nor\n\n\n{ \nerror\n: error_text }\n\n\n\n\nVariable Values\n\n\nSends variable values.\n\n\n\n\nNote\n\n\nBefore sending variable values, configure variables by sending the \nVariables Configuration message\n.\n\n\n\n\nRequest Destination\n\n\n\n\nMethod\n: POST\n\n\nURL\n: \nhttps://cloud4rpi.io/api/devices/{token}/data\n\n\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nHeaders\n\n\nContent-Type: application/json\n\n\n\n\nRequest Body\n\n\n{\n    \nts\n: datetime_isoformat,\n    \npayload\n: {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\ndatetime_isoformat\n\n\nTimestamp (optional)\n\n\nstring\n\n\nTime in the \nISO 8601\n format with the \ntime zone designator\n specified explicitly\n\n\n\n\n\n\nvar_name\n\n\nVariable name\n\n\nstring\n\n\nOne of the variables\n\n\n\n\n\n\nvar_value\n\n\nVariable value\n\n\ncorresponding\n\n\nAny\n\n\n\n\n\n\n\n\nExample\n\n\nThe following example sends the values of two variables:\n\n\n\n\nTemperature\n: \n24\n.\n\n\nLEDOn\n: \ntrue\n.\n\n\n\n\nexport DEVICE_TOKEN=your_device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n$(date -Is)\n,\npayload\n:{\nTemperature\n:24,\nLEDOn\n:true}}' \\\n     https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/data\n\n\n\n\n\n\nNote\n\n\nReplace \nyour_device_token\n with your device token displayed on the \ndevice page\n.\n\n\n\n\nResponse Body\n\n\n{ \nmessage\n: \nOK\n }\n\n\n\n\nor\n\n\n{ \nerror\n: error_text }\n\n\n\n\nDiagnostic Data\n\n\nSends device's diagnostic data.\n\n\nRequest Destination\n\n\n\n\nMethod\n: POST\n\n\nURL\n: \nhttps://cloud4rpi.io/api/devices/{token}/diagnostics\n\n\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nHeaders\n\n\nContent-Type: application/json\n\n\n\n\nRequest Body\n\n\n{\n    \nts\n: datetime_isoformat,\n    \npayload\n: {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\ndatetime_isoformat\n\n\nTimestamp (optional)\n\n\nstring\n\n\nTime in the \nISO 8601\n format with the \ntime zone designator\n specified explicitly\n\n\n\n\n\n\nvar_name\n\n\nVariable name\n\n\nstring\n\n\nAny\n\n\n\n\n\n\nvar_value\n\n\nVariable value\n\n\nany\n\n\nAny\n\n\n\n\n\n\n\n\nExample\n\n\nThe following example sends the following diagnostic values to Cloud4RPi:\n\n\n\n\nCPU Temperature\n: \n41\n\n\nIP Address\n: \n192.168.1.50\n\n\n\n\nexport DEVICE_TOKEN=your_device_token\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -d '{\nts\n:\n$(date -Is)\n,\npayload\n:{\nCPU Temperature\n:41,\nIP Address\n:\n192.168.1.50\n}}' \\\n     https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/diagnostics\n\n\n\n\n\n\nNote\n\n\nReplace \nyour_device_token\n with your device token displayed on the \ndevice page\n.\n\n\n\n\nResponse Body\n\n\n{ \nmessage\n: \nOK\n }\n\n\n\n\nor\n\n\n{ \nerror\n: error_text }\n\n\n\n\nCommands Queue\n\n\nAcquires the recent commands sent from the Control Panel.\n\n\nRequest Destination\n\n\n\n\nMethod\n: GET\n\n\nURL\n: \nhttps://cloud4rpi.io/api/devices/{token}/commands/latest\n\n\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nThe \ndevice\n token\n\n\n\n\n\n\n\n\nExample\n\n\nexport DEVICE_TOKEN=your_device_token\n\ncurl -X GET https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/commands/latest\n\n\n\n\nResponse Body\n\n\n[\n    {var_name: var_new_value},\n    {var_name: var_new_value},\n    // ...\n    {var_name: var_new_value}\n]\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nType\n\n\nPossible Values\n\n\n\n\n\n\n\n\n\n\nvar_name\n\n\nVariable name\n\n\nstring\n\n\nAny\n\n\n\n\n\n\nvar_new_value\n\n\nNew variable value\n\n\ncorresponding\n\n\nAny\n\n\n\n\n\n\n\n\nThe commands are in chronological order.", 
            "title": "HTTP Protocol"
        }, 
        {
            "location": "/api/http/#variables-configuration", 
            "text": "Updates the device's configuration.", 
            "title": "Variables Configuration"
        }, 
        {
            "location": "/api/http/#request-destination", 
            "text": "Method : POST  URL :  https://cloud4rpi.io/api/devices/{token}/config", 
            "title": "Request Destination"
        }, 
        {
            "location": "/api/http/#url-parameters", 
            "text": "Name  Description      token  The  device  token", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/api/http/#headers", 
            "text": "Content-Type: application/json", 
            "title": "Headers"
        }, 
        {
            "location": "/api/http/#request-body", 
            "text": "{\n     payload : {\n        [\n            { name : name,  type : type},\n            { name : name,  type : type},\n            // ...\n            { name : name,  type : type}\n        ]\n    }\n}  or  [\n    { name : name,  type : type},\n    { name : name,  type : type},\n    // ...\n    { name : name,  type : type}\n]", 
            "title": "Request Body"
        }, 
        {
            "location": "/api/http/#parameters", 
            "text": "Name  Description  Type  Possible Values      name  Variable name  string  Any string    type  Variable type  string  \"bool\", \"numeric\" or \"string\"", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/http/#example", 
            "text": "The following example creates two variables on the device:   Temperature  (numeric)  LEDOn  (boolean)   export DEVICE_TOKEN=your_device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '[{ name : Temperature , type : numeric },{ name : LEDOn , type : bool }]' \\\n     https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/config   Note  Replace  your_device_token  with your device token displayed on the  device page .", 
            "title": "Example"
        }, 
        {
            "location": "/api/http/#response-body", 
            "text": "{  message :  OK  }  or  {  error : error_text }", 
            "title": "Response Body"
        }, 
        {
            "location": "/api/http/#variable-values", 
            "text": "Sends variable values.   Note  Before sending variable values, configure variables by sending the  Variables Configuration message .", 
            "title": "Variable Values"
        }, 
        {
            "location": "/api/http/#request-destination_1", 
            "text": "Method : POST  URL :  https://cloud4rpi.io/api/devices/{token}/data", 
            "title": "Request Destination"
        }, 
        {
            "location": "/api/http/#url-parameters_1", 
            "text": "Name  Description      token  The  device  token", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/api/http/#headers_1", 
            "text": "Content-Type: application/json", 
            "title": "Headers"
        }, 
        {
            "location": "/api/http/#request-body_1", 
            "text": "{\n     ts : datetime_isoformat,\n     payload : {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}", 
            "title": "Request Body"
        }, 
        {
            "location": "/api/http/#parameters_1", 
            "text": "Name  Description  Type  Possible Values      datetime_isoformat  Timestamp (optional)  string  Time in the  ISO 8601  format with the  time zone designator  specified explicitly    var_name  Variable name  string  One of the variables    var_value  Variable value  corresponding  Any", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/http/#example_1", 
            "text": "The following example sends the values of two variables:   Temperature :  24 .  LEDOn :  true .   export DEVICE_TOKEN=your_device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : $(date -Is) , payload :{ Temperature :24, LEDOn :true}}' \\\n     https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/data   Note  Replace  your_device_token  with your device token displayed on the  device page .", 
            "title": "Example"
        }, 
        {
            "location": "/api/http/#response-body_1", 
            "text": "{  message :  OK  }  or  {  error : error_text }", 
            "title": "Response Body"
        }, 
        {
            "location": "/api/http/#diagnostic-data", 
            "text": "Sends device's diagnostic data.", 
            "title": "Diagnostic Data"
        }, 
        {
            "location": "/api/http/#request-destination_2", 
            "text": "Method : POST  URL :  https://cloud4rpi.io/api/devices/{token}/diagnostics", 
            "title": "Request Destination"
        }, 
        {
            "location": "/api/http/#url-parameters_2", 
            "text": "Name  Description      token  The  device  token", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/api/http/#headers_2", 
            "text": "Content-Type: application/json", 
            "title": "Headers"
        }, 
        {
            "location": "/api/http/#request-body_2", 
            "text": "{\n     ts : datetime_isoformat,\n     payload : {\n        var_name: var_value,\n        var_name: var_value,\n        // ...\n        var_name: var_value\n    }\n}", 
            "title": "Request Body"
        }, 
        {
            "location": "/api/http/#parameters_2", 
            "text": "Name  Description  Type  Possible Values      datetime_isoformat  Timestamp (optional)  string  Time in the  ISO 8601  format with the  time zone designator  specified explicitly    var_name  Variable name  string  Any    var_value  Variable value  any  Any", 
            "title": "Parameters"
        }, 
        {
            "location": "/api/http/#example_2", 
            "text": "The following example sends the following diagnostic values to Cloud4RPi:   CPU Temperature :  41  IP Address :  192.168.1.50   export DEVICE_TOKEN=your_device_token\n\ncurl -X POST \\\n     -H  Content-Type: application/json  \\\n     -d '{ ts : $(date -Is) , payload :{ CPU Temperature :41, IP Address : 192.168.1.50 }}' \\\n     https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/diagnostics   Note  Replace  your_device_token  with your device token displayed on the  device page .", 
            "title": "Example"
        }, 
        {
            "location": "/api/http/#response-body_2", 
            "text": "{  message :  OK  }  or  {  error : error_text }", 
            "title": "Response Body"
        }, 
        {
            "location": "/api/http/#commands-queue", 
            "text": "Acquires the recent commands sent from the Control Panel.", 
            "title": "Commands Queue"
        }, 
        {
            "location": "/api/http/#request-destination_3", 
            "text": "Method : GET  URL :  https://cloud4rpi.io/api/devices/{token}/commands/latest", 
            "title": "Request Destination"
        }, 
        {
            "location": "/api/http/#url-parameters_3", 
            "text": "Name  Description      token  The  device  token", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/api/http/#example_3", 
            "text": "export DEVICE_TOKEN=your_device_token\n\ncurl -X GET https://cloud4rpi.io/api/devices/${DEVICE_TOKEN}/commands/latest", 
            "title": "Example"
        }, 
        {
            "location": "/api/http/#response-body_3", 
            "text": "[\n    {var_name: var_new_value},\n    {var_name: var_new_value},\n    // ...\n    {var_name: var_new_value}\n]", 
            "title": "Response Body"
        }, 
        {
            "location": "/api/http/#parameters_3", 
            "text": "Name  Description  Type  Possible Values      var_name  Variable name  string  Any    var_new_value  New variable value  corresponding  Any     The commands are in chronological order.", 
            "title": "Parameters"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently asked questions and possible issues you may face when working with \nCloud4RPi\n:\n\n\nHow to avoid an Installation Error?\n\n\nYou can get one of the following errors while installing the Cloud4RPi client library using the \nsudo pip install cloud4rpi\n command:\n\n\n\n\nInstallationError: Command \"python setup.py egg_info\" failed with error code 1\n\n\nError while finding spec for 'pip.__main__' (\nclass 'ImportError'\n: cannot import name 'IncompleteRead'); 'pip' is a package and cannot be directly executed\n\n\n\n\nThis happens because the \nsetuptools\n and/or \npip\n packages your Python interpreter uses are outdated. Update the packages with the following command:\n\n\nsudo pip install --upgrade setuptools pip\n\n\n\n\nAfter updating, reinstall \ncloud4rpi\n:\n\n\nsudo pip install cloud4rpi\n\n\n\n\nRaspberry Pi does not recognize my 1-Wire device\n\n\nIf you experience issues with the 1-Wire interface on Raspberry Pi, follow the instructions below.\n\n\n\n\nRun \nsudo raspi-config\n and make sure that the 1-Wire interface is enabled (\nInterfacing Options\n | \n1-Wire\n menu).\n\n\nAdd the \ndtoverlay=w1-gpio\n string to your \n/boot/config.txt\n file (\necho dtoverlay=w1-gpio | sudo tee -a /boot/config.txt\n).\n\n\nReboot (\nsudo reboot\n command).\n\n\n\n\nDouble-check the wiring and your device's operational voltage. The 1-Wire \nDATA\n bus should be connected to \nGPIO4\n (Pin 7) and pulled up to \nVCC\n.\n\n\n\n\n\n\n\n\nHow to avoid the \"Insecure Platform\" warning?\n\n\nThe \nInsecurePlatformWarning: A true SSLContext object is not available...\n notification appears when you run Cloud4RPi on a Python version lower than 2.7.9. Check your current Python version with the following command:\n\n\npython --version\n\n\n\n\nYou can install the latest version using \none of the following ways\n.\n\n\nWhere are the log files?\n\n\nYou can read the logs containing the service's output and errors using one of the following commands:\n\n\n\n\nless /var/log/cloud4rpi.log\n \u2014 if your init manager is \ninit\n and you have left the \nservice name\n and \nlog path\n unchanged;\n\n\nsudo journalctl -u cloud4rpi\n \u2014 if your init manager is \nsystemd\n and you have not changed the \nservice name\n.\n\n\n\n\n\n\nNote\n\n\nUse the \nps -p 1\n command to see your operating system's init manager. If it differs from \ninit\n and \nsystemd\n, refer to the documentation for your init manager to learn about its logging capabilities or \ncontact us\n.\n\n\n\n\nYou can also call the following function at the beginning of your script to save the script output. It is useful if you do not run your Cloud4RPi-enabled script as a service:\n\n\ncloud4rpi.set_logging_to_file(YOUR_LOGFILE_PATH)\n\n\n\n\nHow to update Cloud4RPi client installation?\n\n\nThe Cloud4RPi client library is a \nPyPI package\n, managed by the \npip utility\n. Execute the following command to update the Cloud4RPi client library:\n\n\nsudo pip install --upgrade cloud4rpi\n\n\n\n\nHow to use the service installed using the service_install.sh script?\n\n\nThe default service's name is \ncloud4rpi\n (can be changed in \nservice_install.sh:4\n). If your init manager is \ninit\n, you can use the following commands:\n\n\nsudo service cloud4rpi start|stop|status|restart|uninstall\n\n\n\n\nIf your init manager is \nsystemd\n, you can use the same commands except for \nuninstall\n. To remove the \nsystemd\n service, execute the following commands:\n\n\nsudo systemctl stop cloud4rpi.service\nsudo systemctl disable cloud4rpi.service\nsudo rm /lib/systemd/system/cloud4rpi.service\nsudo systemctl daemon-reload", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#how-to-avoid-an-installation-error", 
            "text": "You can get one of the following errors while installing the Cloud4RPi client library using the  sudo pip install cloud4rpi  command:   InstallationError: Command \"python setup.py egg_info\" failed with error code 1  Error while finding spec for 'pip.__main__' ( class 'ImportError' : cannot import name 'IncompleteRead'); 'pip' is a package and cannot be directly executed   This happens because the  setuptools  and/or  pip  packages your Python interpreter uses are outdated. Update the packages with the following command:  sudo pip install --upgrade setuptools pip  After updating, reinstall  cloud4rpi :  sudo pip install cloud4rpi", 
            "title": "How to avoid an Installation Error?"
        }, 
        {
            "location": "/faq/#raspberry-pi-does-not-recognize-my-1-wire-device", 
            "text": "If you experience issues with the 1-Wire interface on Raspberry Pi, follow the instructions below.   Run  sudo raspi-config  and make sure that the 1-Wire interface is enabled ( Interfacing Options  |  1-Wire  menu).  Add the  dtoverlay=w1-gpio  string to your  /boot/config.txt  file ( echo dtoverlay=w1-gpio | sudo tee -a /boot/config.txt ).  Reboot ( sudo reboot  command).   Double-check the wiring and your device's operational voltage. The 1-Wire  DATA  bus should be connected to  GPIO4  (Pin 7) and pulled up to  VCC .", 
            "title": "Raspberry Pi does not recognize my 1-Wire device"
        }, 
        {
            "location": "/faq/#how-to-avoid-the-insecure-platform-warning", 
            "text": "The  InsecurePlatformWarning: A true SSLContext object is not available...  notification appears when you run Cloud4RPi on a Python version lower than 2.7.9. Check your current Python version with the following command:  python --version  You can install the latest version using  one of the following ways .", 
            "title": "How to avoid the \"Insecure Platform\" warning?"
        }, 
        {
            "location": "/faq/#where-are-the-log-files", 
            "text": "You can read the logs containing the service's output and errors using one of the following commands:   less /var/log/cloud4rpi.log  \u2014 if your init manager is  init  and you have left the  service name  and  log path  unchanged;  sudo journalctl -u cloud4rpi  \u2014 if your init manager is  systemd  and you have not changed the  service name .    Note  Use the  ps -p 1  command to see your operating system's init manager. If it differs from  init  and  systemd , refer to the documentation for your init manager to learn about its logging capabilities or  contact us .   You can also call the following function at the beginning of your script to save the script output. It is useful if you do not run your Cloud4RPi-enabled script as a service:  cloud4rpi.set_logging_to_file(YOUR_LOGFILE_PATH)", 
            "title": "Where are the log files?"
        }, 
        {
            "location": "/faq/#how-to-update-cloud4rpi-client-installation", 
            "text": "The Cloud4RPi client library is a  PyPI package , managed by the  pip utility . Execute the following command to update the Cloud4RPi client library:  sudo pip install --upgrade cloud4rpi", 
            "title": "How to update Cloud4RPi client installation?"
        }, 
        {
            "location": "/faq/#how-to-use-the-service-installed-using-the-service_installsh-script", 
            "text": "The default service's name is  cloud4rpi  (can be changed in  service_install.sh:4 ). If your init manager is  init , you can use the following commands:  sudo service cloud4rpi start|stop|status|restart|uninstall  If your init manager is  systemd , you can use the same commands except for  uninstall . To remove the  systemd  service, execute the following commands:  sudo systemctl stop cloud4rpi.service\nsudo systemctl disable cloud4rpi.service\nsudo rm /lib/systemd/system/cloud4rpi.service\nsudo systemctl daemon-reload", 
            "title": "How to use the service installed using the service_install.sh script?"
        }
    ]
}